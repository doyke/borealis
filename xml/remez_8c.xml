<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="remez_8c" kind="file" language="C++">
    <compoundname>remez.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="yes">X11/Xlib.h</includes>
    <includes refid="remez_8h" local="yes">remez.h</includes>
    <incdepgraph>
      <node id="52">
        <label>assert.h</label>
      </node>
      <node id="51">
        <label>stdlib.h</label>
      </node>
      <node id="48">
        <label>rx_signal_processing/remez.c</label>
        <link refid="remez.c"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>remez.h</label>
        <link refid="remez_8h_source"/>
      </node>
      <node id="50">
        <label>math.h</label>
      </node>
      <node id="53">
        <label>X11/Xlib.h</label>
      </node>
      <node id="49">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="remez_8c_1a5a387225399aaf3715077bbf404c2a34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CreateDenseGrid</definition>
        <argsstring>(int r, int numtaps, int numband, const double bands[], const double des[], const double weight[], int gridsize, double Grid[], double D[], double W[], int symmetry, int griddensity)</argsstring>
        <name>CreateDenseGrid</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numtaps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numband</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bands</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>des</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>gridsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Grid</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>D</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>W</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>symmetry</declname>
        </param>
        <param>
          <type>int</type>
          <declname>griddensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="61" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="61" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1afd685c1c622c866839786c26b661593f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void InitialGuess</definition>
        <argsstring>(int r, int Ext[], int gridsize)</argsstring>
        <name>InitialGuess</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ext</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>gridsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="125" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1a4261c87ad066aa678779da17d1c61175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalcParms</definition>
        <argsstring>(int r, int Ext[], double Grid[], double D[], double W[], double ad[], double x[], double y[])</argsstring>
        <name>CalcParms</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ext</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>Grid</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>D</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>W</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>ad</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="154" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="154" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1a0e52751f94d4c3f2e5ade81d059235ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ComputeA</definition>
        <argsstring>(double freq, int r, double ad[], double x[], double y[])</argsstring>
        <name>ComputeA</name>
        <param>
          <type>double</type>
          <declname>freq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ad</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="231" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="231" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1ab83c6934bd5df22f85e2d1eed5cad889" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CalcError</definition>
        <argsstring>(int r, double ad[], double x[], double y[], int gridsize, double Grid[], double D[], double W[], double E[])</argsstring>
        <name>CalcError</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ad</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>gridsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>Grid</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>D</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>W</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="279" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="279" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1aae68e4c16490d206aef8f1b1aa3e6195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Search</definition>
        <argsstring>(int r, int Ext[], int gridsize, double E[])</argsstring>
        <name>Search</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ext</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>gridsize</declname>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="317" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="317" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1a21508975da3e2e735654f6c6eeb4a038" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FreqSample</definition>
        <argsstring>(int N, double A[], double h[], int symm)</argsstring>
        <name>FreqSample</name>
        <param>
          <type>int</type>
          <declname>N</declname>
        </param>
        <param>
          <type>double</type>
          <declname>A</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>h</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>symm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="453" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="453" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1a55483ab0d713b7235856d9e49f105efb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int isDone</definition>
        <argsstring>(int r, int Ext[], double E[])</argsstring>
        <name>isDone</name>
        <param>
          <type>int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Ext</declname>
          <array>[]</array>
        </param>
        <param>
          <type>double</type>
          <declname>E</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="529" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="529" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="remez_8c_1a6a3da7400c52cfd74d0329f9c5191b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int remez</definition>
        <argsstring>(double h[], int numtaps, int numband, const double bands[], const double des[], const double weight[], int type, int griddensity)</argsstring>
        <name>remez</name>
        <param>
          <type>double</type>
          <declname>h</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>numtaps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>numband</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>bands</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>des</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const double</type>
          <declname>weight</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>griddensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="rx_signal_processing/remez.c" line="569" column="1" bodyfile="rx_signal_processing/remez.c" bodystart="569" bodyend="731"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>1995,<sp/>1998<sp/>Jake<sp/>Janovetz<sp/>&lt;janovetz@uiuc.edu&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>1999<sp/>Paul<sp/>Kienzle<sp/>&lt;pkienzle@users.sf.net&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2000<sp/>Kai<sp/>Habel<sp/>&lt;kahacjde@linux.zrz.tu-berlin.de&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Foundation;<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>see<sp/>&lt;http://www.gnu.org/licenses/&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/**************************************************************************</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/>There<sp/>appear<sp/>to<sp/>be<sp/>some<sp/>problems<sp/>with<sp/>the<sp/>routine<sp/>Search.<sp/>See<sp/>comments</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/>therein<sp/>[search<sp/>for<sp/>PAK:].<sp/><sp/>I<sp/>haven&apos;t<sp/>looked<sp/>closely<sp/>at<sp/>the<sp/>rest</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/>of<sp/>the<sp/>code---it<sp/>may<sp/>also<sp/>have<sp/>some<sp/>problems.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;X11/Xlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;remez.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*******************</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>CreateDenseGrid</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*=================</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Creates<sp/>the<sp/>dense<sp/>grid<sp/>of<sp/>frequencies<sp/>from<sp/>the<sp/>specified<sp/>bands.</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Also<sp/>creates<sp/>the<sp/>Desired<sp/>Frequency<sp/>Response<sp/>function<sp/>(D[])<sp/>and</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>the<sp/>Weight<sp/>function<sp/>(W[])<sp/>on<sp/>that<sp/>dense<sp/>grid</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>numtaps<sp/><sp/>-<sp/>Number<sp/>of<sp/>taps<sp/>in<sp/>the<sp/>resulting<sp/>filter</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>numband<sp/><sp/>-<sp/>Number<sp/>of<sp/>bands<sp/>in<sp/>user<sp/>specification</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/><sp/>bands[]<sp/><sp/>-<sp/>User-specified<sp/>band<sp/>edges<sp/>[2*numband]</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/><sp/>des[]<sp/><sp/><sp/><sp/>-<sp/>Desired<sp/>response<sp/>per<sp/>band<sp/>[2*numband]</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/><sp/>weight[]<sp/>-<sp/>Weight<sp/>per<sp/>band<sp/>[numband]</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>symmetry<sp/>-<sp/>Symmetry<sp/>of<sp/>filter<sp/>-<sp/>used<sp/>for<sp/>grid<sp/>check</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>griddensity</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>gridsize<sp/><sp/><sp/>-<sp/>Number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>dense<sp/>frequency<sp/>grid</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/>double<sp/>Grid[]<sp/><sp/><sp/><sp/><sp/>-<sp/>Frequencies<sp/>(0<sp/>to<sp/>0.5)<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>double<sp/>D[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Desired<sp/>response<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>double<sp/>W[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Weight<sp/>function<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*******************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateDenseGrid(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numtaps,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numband,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bands[],</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>des[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridsize,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Grid[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>W[],</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symmetry,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>griddensity)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>band;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delf,<sp/>lowf,<sp/>highf,<sp/>grid0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>delf<sp/>=<sp/>0.5/(griddensity*r);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>*<sp/>For<sp/>differentiator,<sp/>hilbert,</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>symmetry<sp/>is<sp/>odd<sp/>and<sp/>Grid[0]<sp/>=<sp/>max(delf,<sp/>bands[0])</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>grid0<sp/>=<sp/>(symmetry<sp/>==<sp/>NEGATIVE)<sp/>&amp;&amp;<sp/>(delf<sp/>&gt;<sp/>bands[0])<sp/>?<sp/>delf<sp/>:<sp/>bands[0];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>j=0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(band=0;<sp/>band<sp/>&lt;<sp/>numband;<sp/>band++)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lowf<sp/>=<sp/>(band==0<sp/>?<sp/>grid0<sp/>:<sp/>bands[2*band]);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>highf<sp/>=<sp/>bands[2*band<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(int)((highf<sp/>-<sp/>lowf)/delf<sp/>+<sp/>0.5);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>.5<sp/>for<sp/>rounding<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(band<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>symmetry<sp/>==<sp/>NEGATIVE)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k--;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;k;<sp/>i++)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D[j]<sp/>=<sp/>des[2*band]<sp/>+<sp/>i*(des[2*band+1]-des[2*band])/(k-1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[j]<sp/>=<sp/>weight[band];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grid[j]<sp/>=<sp/>lowf;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowf<sp/>+=<sp/>delf;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j++;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Grid[j-1]<sp/>=<sp/>highf;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>Similar<sp/>to<sp/>above,<sp/>if<sp/>odd<sp/>symmetry,<sp/>last<sp/>grid<sp/>point<sp/>can&apos;t<sp/>be<sp/>.5</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>but,<sp/>if<sp/>there<sp/>are<sp/>even<sp/>taps,<sp/>leave<sp/>the<sp/>last<sp/>grid<sp/>point<sp/>at<sp/>.5</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((symmetry<sp/>==<sp/>NEGATIVE)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Grid[gridsize-1]<sp/>&gt;<sp/>(0.5<sp/>-<sp/>delf))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(numtaps<sp/>%<sp/>2))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Grid[gridsize-1]<sp/>=<sp/>0.5-delf;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/********************</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>InitialGuess</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*==============</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>Places<sp/>Extremal<sp/>Frequencies<sp/>evenly<sp/>throughout<sp/>the<sp/>dense<sp/>grid.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>int<sp/>r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>int<sp/>gridsize<sp/>-<sp/>Number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>dense<sp/>frequency<sp/>grid</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>int<sp/>Ext[]<sp/><sp/><sp/><sp/>-<sp/>Extremal<sp/>indexes<sp/>to<sp/>dense<sp/>frequency<sp/>grid<sp/>[r+1]</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitialGuess(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ext[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridsize)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>Ext[i]<sp/>=<sp/>i<sp/>*<sp/>(gridsize-1)<sp/>/<sp/>r;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/***********************</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>CalcParms</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*===========</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>Ext[]<sp/><sp/>-<sp/>Extremal<sp/>indexes<sp/>to<sp/>dense<sp/>frequency<sp/>grid<sp/>[r+1]</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>double<sp/>Grid[]<sp/>-<sp/>Frequencies<sp/>(0<sp/>to<sp/>0.5)<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>double<sp/>D[]<sp/><sp/><sp/><sp/>-<sp/>Desired<sp/>response<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>double<sp/>W[]<sp/><sp/><sp/><sp/>-<sp/>Weight<sp/>function<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>double<sp/>ad[]<sp/><sp/><sp/>-<sp/>&apos;b&apos;<sp/>in<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>[r+1]</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/>double<sp/>x[]<sp/><sp/><sp/><sp/>-<sp/>[r+1]</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>double<sp/>y[]<sp/><sp/><sp/><sp/>-<sp/>&apos;C&apos;<sp/>in<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>[r+1]</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>***********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CalcParms(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ext[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Grid[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>W[],</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ad[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[])</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>ld;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sign,<sp/>xi,<sp/>delta,<sp/>denom,<sp/>numer;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Find<sp/>x[]</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>cos(Pi2<sp/>*<sp/>Grid[Ext[i]]);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calculate<sp/>ad[]<sp/><sp/>-<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>eq<sp/>7.132</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>ld<sp/>=<sp/>(r-1)/15<sp/>+<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Skips<sp/>around<sp/>to<sp/>avoid<sp/>round<sp/>errors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xi<sp/>=<sp/>x[i];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;ld;<sp/>j++)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=j;<sp/>k&lt;=r;<sp/>k+=ld)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>!=<sp/>i)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>*=<sp/>2.0*(xi<sp/>-<sp/>x[k]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(denom)&lt;0.00001)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>0.00001;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ad[i]<sp/>=<sp/>1.0/denom;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calculate<sp/>delta<sp/><sp/>-<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>eq<sp/>7.131</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>numer<sp/>=<sp/>denom<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numer<sp/>+=<sp/>ad[i]<sp/>*<sp/>D[Ext[i]];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>+=<sp/>sign<sp/>*<sp/>ad[i]/W[Ext[i]];</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-sign;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>delta<sp/>=<sp/>numer/denom;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Calculate<sp/>y[]<sp/><sp/>-<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>eq<sp/>7.133b</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>D[Ext[i]]<sp/>-<sp/>sign<sp/>*<sp/>delta/W[Ext[i]];</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-sign;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>ComputeA</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*==========</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>Using<sp/>values<sp/>calculated<sp/>in<sp/>CalcParms,<sp/>ComputeA<sp/>calculates<sp/>the</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>actual<sp/>filter<sp/>response<sp/>at<sp/>a<sp/>given<sp/>frequency<sp/>(freq).<sp/><sp/>Uses</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>eq<sp/>7.133a<sp/>from<sp/>Oppenheim<sp/>&amp;<sp/>Schafer.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>double<sp/>freq<sp/>-<sp/>Frequency<sp/>(0<sp/>to<sp/>0.5)<sp/>at<sp/>which<sp/>to<sp/>calculate<sp/>A</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>double<sp/>ad[]<sp/>-<sp/>&apos;b&apos;<sp/>in<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>[r+1]</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>double<sp/>x[]<sp/><sp/>-<sp/>[r+1]</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>double<sp/>y[]<sp/><sp/>-<sp/>&apos;C&apos;<sp/>in<sp/>Oppenheim<sp/>&amp;<sp/>Schafer<sp/>[r+1]</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>Returns<sp/>double<sp/>value<sp/>of<sp/>A[freq]</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ComputeA(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ad[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[])</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xc,<sp/>c,<sp/>denom,<sp/>numer;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>denom<sp/>=<sp/>numer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>xc<sp/>=<sp/>cos(Pi2<sp/>*<sp/>freq);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>xc<sp/>-<sp/>x[i];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(c)<sp/>&lt;<sp/>1.0e-7)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numer<sp/>=<sp/>y[i];</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>ad[i]/c;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numer<sp/>+=<sp/>c*y[i];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numer/denom;</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>CalcError</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*===========</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>Calculates<sp/>the<sp/>Error<sp/>function<sp/>from<sp/>the<sp/>desired<sp/>frequency<sp/>response</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>(D[]),<sp/>the<sp/>weight<sp/>function<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>(W[]),</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>and<sp/>the<sp/>present<sp/>response<sp/>calculation<sp/>(A[])</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>double<sp/>ad[]<sp/><sp/><sp/>-<sp/>[r+1]</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>double<sp/>x[]<sp/><sp/><sp/><sp/>-<sp/>[r+1]</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>double<sp/>y[]<sp/><sp/><sp/><sp/>-<sp/>[r+1]</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>int<sp/>gridsize<sp/><sp/>-<sp/>Number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>dense<sp/>frequency<sp/>grid</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>double<sp/>Grid[]<sp/>-<sp/>Frequencies<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>double<sp/>D[]<sp/><sp/><sp/><sp/>-<sp/>Desired<sp/>response<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>double<sp/>W[]<sp/><sp/><sp/><sp/>-<sp/>Weight<sp/>function<sp/>on<sp/>the<sp/>desnse<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*<sp/>double<sp/>E[]<sp/><sp/><sp/><sp/>-<sp/>Error<sp/>function<sp/>on<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CalcError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ad[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y[],</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridsize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Grid[],</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>D[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>W[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E[])</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;gridsize;<sp/>i++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>ComputeA(Grid[i],<sp/>r,<sp/>ad,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E[i]<sp/>=<sp/>W[i]<sp/>*<sp/>(D[i]<sp/>-<sp/>A);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/************************</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>Search</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*========</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>Searches<sp/>for<sp/>the<sp/>maxima/minima<sp/>of<sp/>the<sp/>error<sp/>curve.<sp/><sp/>If<sp/>more<sp/>than</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*<sp/>r+1<sp/>extrema<sp/>are<sp/>found,<sp/>it<sp/>uses<sp/>the<sp/>following<sp/>heuristic<sp/>(thanks</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/>*<sp/>Chris<sp/>Hanson):</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>1)<sp/>Adjacent<sp/>non-alternating<sp/>extrema<sp/>deleted<sp/>first.</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/>2)<sp/>If<sp/>there<sp/>are<sp/>more<sp/>than<sp/>one<sp/>excess<sp/>extrema,<sp/>delete<sp/>the</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>one<sp/>with<sp/>the<sp/>smallest<sp/>error.<sp/><sp/>This<sp/>will<sp/>create<sp/>a<sp/>non-alternation</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>condition<sp/>that<sp/>is<sp/>fixed<sp/>by<sp/>1).</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>3)<sp/>If<sp/>there<sp/>is<sp/>exactly<sp/>one<sp/>excess<sp/>extremum,<sp/>delete<sp/>the<sp/>smaller</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>of<sp/>the<sp/>first/last<sp/>extremum</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>Ext[]<sp/><sp/><sp/><sp/>-<sp/>Indexes<sp/>to<sp/>Grid[]<sp/>of<sp/>extremal<sp/>frequencies<sp/>[r+1]</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>gridsize<sp/>-<sp/>Number<sp/>of<sp/>elements<sp/>in<sp/>the<sp/>dense<sp/>frequency<sp/>grid</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*<sp/>double<sp/>E[]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Array<sp/>of<sp/>error<sp/>values.<sp/><sp/>[gridsize]</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>Ext[]<sp/><sp/><sp/><sp/>-<sp/>New<sp/>indexes<sp/>to<sp/>extremal<sp/>frequencies<sp/>[r+1]</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Search(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ext[],</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridsize,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E[])</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>extra;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>up,<sp/>alt;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*foundExt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Array<sp/>of<sp/>found<sp/>extremals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Allocate<sp/>enough<sp/>space<sp/>for<sp/>found<sp/>extremals.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>foundExt<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc((2*r)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Check<sp/>for<sp/>extremum<sp/>at<sp/>0.</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((E[0]&gt;0.0)<sp/>&amp;&amp;<sp/>(E[0]&gt;E[1]))<sp/>||</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>((E[0]&lt;0.0)<sp/>&amp;&amp;<sp/>(E[0]&lt;E[1])))</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>foundExt[k++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Check<sp/>for<sp/>extrema<sp/>inside<sp/>dense<sp/>grid</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;gridsize-1;<sp/>i++)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((E[i]&gt;=E[i-1])<sp/>&amp;&amp;<sp/>(E[i]&gt;E[i+1])<sp/>&amp;&amp;<sp/>(E[i]&gt;0.0))<sp/>||</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((E[i]&lt;=E[i-1])<sp/>&amp;&amp;<sp/>(E[i]&lt;E[i+1])<sp/>&amp;&amp;<sp/>(E[i]&lt;0.0)))<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PAK:<sp/>we<sp/>sometimes<sp/>get<sp/>too<sp/>many<sp/>extremal<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>2*r)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundExt[k++]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Check<sp/>for<sp/>extremum<sp/>at<sp/>0.5</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>j<sp/>=<sp/>gridsize-1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((E[j]&gt;0.0)<sp/>&amp;&amp;<sp/>(E[j]&gt;E[j-1]))<sp/>||</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((E[j]&lt;0.0)<sp/>&amp;&amp;<sp/>(E[j]&lt;E[j-1])))<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;=<sp/>2*r)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>foundExt[k++]<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PAK:<sp/>we<sp/>sometimes<sp/>get<sp/>not<sp/>enough<sp/>extremal<sp/>frequencies</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&lt;<sp/>r+1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Remove<sp/>extra<sp/>extremals</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>extra<sp/>=<sp/>k<sp/>-<sp/>(r+1);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>assert(extra<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(extra<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(E[foundExt[0]]<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>one<sp/>is<sp/>a<sp/>maxima<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>first<sp/>one<sp/>is<sp/>a<sp/>minima<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l=0;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>alt<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j&lt;k;<sp/>j++)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(E[foundExt[j]])<sp/>&lt;<sp/>fabs(E[foundExt[l]]))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>j;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>new<sp/>smallest<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((up)<sp/>&amp;&amp;<sp/>(E[foundExt[j]]<sp/>&lt;<sp/>0.0))</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>switch<sp/>to<sp/>a<sp/>minima<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!up)<sp/>&amp;&amp;<sp/>(E[foundExt[j]]<sp/>&gt;<sp/>0.0))</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up<sp/>=<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>switch<sp/>to<sp/>a<sp/>maxima<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PAK:<sp/>break<sp/>now<sp/>and<sp/>you<sp/>will<sp/>delete<sp/>the<sp/>smallest<sp/>overall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>extremal.<sp/><sp/>If<sp/>you<sp/>want<sp/>to<sp/>delete<sp/>the<sp/>smallest<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pair<sp/>of<sp/>non-alternating<sp/>extremals,<sp/>then<sp/>you<sp/>must<sp/>do:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(fabs(E[foundExt[j]])<sp/>&lt;<sp/>fabs(E[foundExt[j-1]]))<sp/>l=j;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>else<sp/>l=j-1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ooops,<sp/>found<sp/>two<sp/>non-alternating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>extrema.<sp/><sp/>Delete<sp/>smallest<sp/>of<sp/>them<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>the<sp/>loop<sp/>finishes,<sp/>all<sp/>extrema<sp/>are<sp/>alternating<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>there&apos;s<sp/>only<sp/>one<sp/>extremal<sp/>and<sp/>all<sp/>are<sp/>alternating,</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>delete<sp/>the<sp/>smallest<sp/>of<sp/>the<sp/>first/last<sp/>extremals.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((alt)<sp/>&amp;&amp;<sp/>(extra<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(E[foundExt[k-1]])<sp/>&lt;<sp/>fabs(E[foundExt[0]]))</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>last<sp/>extremal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>k-1;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PAK:<sp/>changed<sp/>from<sp/>l<sp/>=<sp/>foundExt[k-1];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Delete<sp/>first<sp/>extremal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PAK:<sp/>changed<sp/>from<sp/>l<sp/>=<sp/>foundExt[0];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=l;<sp/>j&lt;k-1;<sp/>j++)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>that<sp/>does<sp/>the<sp/>deletion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>foundExt[j]<sp/>=<sp/>foundExt[j+1];</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(foundExt[j]&lt;gridsize);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k--;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra--;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(foundExt[i]&lt;gridsize);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Ext[i]<sp/>=<sp/>foundExt[i];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>found<sp/>extremals<sp/>to<sp/>Ext[]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>free(foundExt);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>FreqSample</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*============</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>Simple<sp/>frequency<sp/>sampling<sp/>algorithm<sp/>to<sp/>determine<sp/>the<sp/>impulse</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>response<sp/>h[]<sp/>from<sp/>A&apos;s<sp/>found<sp/>in<sp/>ComputeA</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>N<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/><sp/>A[]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Sample<sp/>points<sp/>of<sp/>desired<sp/>response<sp/>[N/2]</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/><sp/>symmetry<sp/>-<sp/>Symmetry<sp/>of<sp/>desired<sp/>filter</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>double<sp/>h[]<sp/>-<sp/>Impulse<sp/>Response<sp/>of<sp/>final<sp/>filter<sp/>[N]</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FreqSample(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>symm)</highlight></codeline>
<codeline lineno="454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>k;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/>val,<sp/>M;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>M<sp/>=<sp/>(N-1.0)/2.0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symm<sp/>==<sp/>POSITIVE)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N%2)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n&lt;N;<sp/>n++)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>A[0];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>Pi2<sp/>*<sp/>(n<sp/>-<sp/>M)/N;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=1;<sp/>k&lt;=M;<sp/>k++)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>2.0<sp/>*<sp/>A[k]<sp/>*<sp/>cos(x*k);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[n]<sp/>=<sp/>val/N;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n&lt;N;<sp/>n++)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>A[0];</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>Pi2<sp/>*<sp/>(n<sp/>-<sp/>M)/N;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=1;<sp/>k&lt;=(N/2-1);<sp/>k++)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>2.0<sp/>*<sp/>A[k]<sp/>*<sp/>cos(x*k);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[n]<sp/>=<sp/>val/N;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(N%2)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n&lt;N;<sp/>n++)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>Pi2<sp/>*<sp/>(n<sp/>-<sp/>M)/N;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=1;<sp/>k&lt;=M;<sp/>k++)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>2.0<sp/>*<sp/>A[k]<sp/>*<sp/>sin(x*k);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[n]<sp/>=<sp/>val/N;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n&lt;N;<sp/>n++)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>A[N/2]<sp/>*<sp/>sin(Pi<sp/>*<sp/>(n<sp/>-<sp/>M));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/>Pi2<sp/>*<sp/>(n<sp/>-<sp/>M)/N;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=1;<sp/>k&lt;=(N/2-1);<sp/>k++)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>+=<sp/>2.0<sp/>*<sp/>A[k]<sp/>*<sp/>sin(x*k);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h[n]<sp/>=<sp/>val/N;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">/*******************</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>isDone</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*========</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>Checks<sp/>to<sp/>see<sp/>if<sp/>the<sp/>error<sp/>function<sp/>is<sp/>small<sp/>enough<sp/>to<sp/>consider</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>the<sp/>result<sp/>to<sp/>have<sp/>converged.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>r<sp/><sp/><sp/><sp/><sp/>-<sp/>1/2<sp/>the<sp/>number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/>Ext[]<sp/>-<sp/>Indexes<sp/>to<sp/>extremal<sp/>frequencies<sp/>[r+1]</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>double<sp/>E[]<sp/><sp/><sp/>-<sp/>Error<sp/>function<sp/>on<sp/>the<sp/>dense<sp/>grid<sp/>[gridsize]</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>Returns<sp/>1<sp/>if<sp/>the<sp/>result<sp/>converged</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>Returns<sp/>0<sp/>if<sp/>the<sp/>result<sp/>has<sp/>not<sp/>converged</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isDone(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ext[],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E[])</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>min,<sp/>max,<sp/>current;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>min<sp/>=<sp/>max<sp/>=<sp/>fabs(E[Ext[0]]);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=1;<sp/>i&lt;=r;<sp/>i++)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>fabs(E[Ext[i]]);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>&lt;<sp/>min)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>&gt;<sp/>max)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>current;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((max-min)/max)<sp/>&lt;<sp/>0.0001);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/********************</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>remez</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*=======</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>Calculates<sp/>the<sp/>optimal<sp/>(in<sp/>the<sp/>Chebyshev/minimax<sp/>sense)</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>FIR<sp/>filter<sp/>impulse<sp/>response<sp/>given<sp/>a<sp/>set<sp/>of<sp/>band<sp/>edges,</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>the<sp/>desired<sp/>response<sp/>on<sp/>those<sp/>bands,<sp/>and<sp/>the<sp/>weight<sp/>given<sp/>to</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>the<sp/>error<sp/>in<sp/>those<sp/>bands.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>INPUT:</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>------</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/>numtaps<sp/><sp/><sp/><sp/><sp/>-<sp/>Number<sp/>of<sp/>filter<sp/>coefficients</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/>numband<sp/><sp/><sp/><sp/><sp/>-<sp/>Number<sp/>of<sp/>bands<sp/>in<sp/>filter<sp/>specification</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/>bands[]<sp/><sp/><sp/><sp/><sp/>-<sp/>User-specified<sp/>band<sp/>edges<sp/>[2<sp/>*<sp/>numband]</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/>des[]<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>User-specified<sp/>band<sp/>responses<sp/>[numband]</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>double<sp/><sp/>weight[]<sp/><sp/><sp/><sp/>-<sp/>User-specified<sp/>error<sp/>weights<sp/>[numband]</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>int<sp/><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Type<sp/>of<sp/>filter</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>OUTPUT:</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/>-------</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>double<sp/>h[]<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>Impulse<sp/>response<sp/>of<sp/>final<sp/>filter<sp/>[numtaps]</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>returns<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>0<sp/>on<sp/>success,<sp/>-1<sp/>on<sp/>failure<sp/>to<sp/>converge</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remez(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numtaps,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numband,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bands[],</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>des[],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weight[],</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>griddensity)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*Grid,<sp/>*W,<sp/>*D,<sp/>*E;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>i,<sp/>iter,<sp/>gridsize,<sp/>r,<sp/>*Ext;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*taps,<sp/>c;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/>*y,<sp/>*ad;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>symmetry;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>BANDPASS)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>symmetry<sp/>=<sp/>POSITIVE;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>symmetry<sp/>=<sp/>NEGATIVE;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>numtaps/2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>number<sp/>of<sp/>extrema<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((numtaps%2)<sp/>&amp;&amp;<sp/>(symmetry<sp/>==<sp/>POSITIVE))</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>r++;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Predict<sp/>dense<sp/>grid<sp/>size<sp/>in<sp/>advance<sp/>for<sp/>memory<sp/>allocation</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/>*<sp/><sp/><sp/>.5<sp/>is<sp/>so<sp/>we<sp/>round<sp/>up,<sp/>not<sp/>truncate</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>gridsize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;numband;<sp/>i++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gridsize<sp/>+=<sp/>(int)(2*r*griddensity*(bands[2*i+1]<sp/>-<sp/>bands[2*i])<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symmetry<sp/>==<sp/>NEGATIVE)</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gridsize--;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Dynamically<sp/>allocate<sp/>memory<sp/>for<sp/>arrays<sp/>with<sp/>proper<sp/>sizes</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>Grid<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(gridsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>D<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(gridsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>W<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(gridsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>E<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(gridsize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>Ext<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)malloc((r+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>taps<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc((r+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>x<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc((r+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>y<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc((r+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>ad<sp/>=<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc((r+1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Create<sp/>dense<sp/>frequency<sp/>grid</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>CreateDenseGrid(r,<sp/>numtaps,<sp/>numband,<sp/>bands,<sp/>des,<sp/>weight,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gridsize,<sp/>Grid,<sp/>D,<sp/>W,<sp/>symmetry,<sp/>griddensity);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>InitialGuess(r,<sp/>Ext,<sp/>gridsize);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/>*<sp/>For<sp/>Differentiator:<sp/>(fix<sp/>grid)</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>DIFFERENTIATOR)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;gridsize;<sp/>i++)</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>D[i]<sp/>=<sp/>D[i]*Grid[i];<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(D[i]<sp/>&gt;<sp/>0.0001)</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[i]<sp/>=<sp/>W[i]/Grid[i];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/>*<sp/>For<sp/>odd<sp/>or<sp/>Negative<sp/>symmetry<sp/>filters,<sp/>alter<sp/>the</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/>*<sp/>D[]<sp/>and<sp/>W[]<sp/>according<sp/>to<sp/>Parks<sp/>McClellan</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symmetry<sp/>==<sp/>POSITIVE)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numtaps<sp/>%<sp/>2<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;gridsize;<sp/>i++)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>cos(Pi<sp/>*<sp/>Grid[i]);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D[i]<sp/>/=<sp/>c;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[i]<sp/>*=<sp/>c;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numtaps<sp/>%<sp/>2)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;gridsize;<sp/>i++)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sin(Pi2<sp/>*<sp/>Grid[i]);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D[i]<sp/>/=<sp/>c;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[i]<sp/>*=<sp/>c;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;gridsize;<sp/>i++)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sin(Pi<sp/>*<sp/>Grid[i]);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>D[i]<sp/>/=<sp/>c;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>W[i]<sp/>*=<sp/>c;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Perform<sp/>the<sp/>Remez<sp/>Exchange<sp/>algorithm</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter=0;<sp/>iter&lt;MAXITERATIONS;<sp/>iter++)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CalcParms(r,<sp/>Ext,<sp/>Grid,<sp/>D,<sp/>W,<sp/>ad,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CalcError(r,<sp/>ad,<sp/>x,<sp/>y,<sp/>gridsize,<sp/>Grid,<sp/>D,<sp/>W,<sp/>E);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err<sp/>=<sp/>Search(r,<sp/>Ext,<sp/>gridsize,<sp/>E);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;=<sp/>r;<sp/>i++)<sp/>assert(Ext[i]&lt;gridsize);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isDone(r,<sp/>Ext,<sp/>E))</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>CalcParms(r,<sp/>Ext,<sp/>Grid,<sp/>D,<sp/>W,<sp/>ad,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Find<sp/>the<sp/>&apos;taps&apos;<sp/>of<sp/>the<sp/>filter<sp/>for<sp/>use<sp/>with<sp/>Frequency</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Sampling.<sp/><sp/>If<sp/>odd<sp/>or<sp/>Negative<sp/>symmetry,<sp/>fix<sp/>the<sp/>taps</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/><sp/><sp/>*<sp/>according<sp/>to<sp/>Parks<sp/>McClellan</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;=numtaps/2;<sp/>i++)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(symmetry<sp/>==<sp/>POSITIVE)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numtaps%2)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>cos(Pi<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i/numtaps);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numtaps%2)</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sin(Pi2<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i/numtaps);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>sin(Pi<sp/>*<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i/numtaps);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>taps[i]<sp/>=<sp/>ComputeA((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)i/numtaps,<sp/>r,<sp/>ad,<sp/>x,<sp/>y)*c;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Frequency<sp/>sampling<sp/>design<sp/>with<sp/>calculated<sp/>taps</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>FreqSample(numtaps,<sp/>taps,<sp/>h,<sp/>symmetry);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Delete<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="721"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>free(Grid);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>free(W);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>free(D);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>free(E);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>free(Ext);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>free(y);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>free(ad);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iter&lt;MAXITERATIONS?0:-1;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>==<sp/>Octave<sp/>interface<sp/>starts<sp/>here<sp/>======================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">/*DEFUN_DLD<sp/>(remez,<sp/>args,<sp/>,</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/>&quot;-*-<sp/>texinfo<sp/>-*-\n\</highlight></codeline>
<codeline lineno="738"><highlight class="comment">@deftypefn<sp/><sp/>{Loadable<sp/>Function}<sp/>{@var{b}<sp/>=}<sp/>remez<sp/>(@var{n},<sp/>@var{f},<sp/>@var{a})\n\</highlight></codeline>
<codeline lineno="739"><highlight class="comment">@deftypefnx<sp/>{Loadable<sp/>Function}<sp/>{@var{b}<sp/>=}<sp/>remez<sp/>(@var{n},<sp/>@var{f},<sp/>@var{a},<sp/>@var{w})\n\</highlight></codeline>
<codeline lineno="740"><highlight class="comment">@deftypefnx<sp/>{Loadable<sp/>Function}<sp/>{@var{b}<sp/>=}<sp/>remez<sp/>(@var{n},<sp/>@var{f},<sp/>@var{a},<sp/>@var{w},<sp/>@var{ftype})\n\</highlight></codeline>
<codeline lineno="741"><highlight class="comment">@deftypefnx<sp/>{Loadable<sp/>Function}<sp/>{@var{b}<sp/>=}<sp/>remez<sp/>(@var{n},<sp/>@var{f},<sp/>@var{a},<sp/>@var{w},<sp/>@var{ftype},<sp/>@var{griddensity})\n\</highlight></codeline>
<codeline lineno="742"><highlight class="comment">Parks-McClellan<sp/>optimal<sp/>FIR<sp/>filter<sp/>design.\n\</highlight></codeline>
<codeline lineno="743"><highlight class="comment">@table<sp/>@var\n\</highlight></codeline>
<codeline lineno="744"><highlight class="comment">@item<sp/>n\n\</highlight></codeline>
<codeline lineno="745"><highlight class="comment">gives<sp/>the<sp/>number<sp/>of<sp/>taps<sp/>in<sp/>the<sp/>returned<sp/>filter\n\</highlight></codeline>
<codeline lineno="746"><highlight class="comment">@item<sp/>f\n\</highlight></codeline>
<codeline lineno="747"><highlight class="comment">gives<sp/>frequency<sp/>at<sp/>the<sp/>band<sp/>edges<sp/>[b1<sp/>e1<sp/>b2<sp/>e2<sp/>b3<sp/>e3<sp/>@dots{}]\n\</highlight></codeline>
<codeline lineno="748"><highlight class="comment">@item<sp/>a\n\</highlight></codeline>
<codeline lineno="749"><highlight class="comment">gives<sp/>amplitude<sp/>at<sp/>the<sp/>band<sp/>edges<sp/>[a(b1)<sp/>a(e1)<sp/>a(b2)<sp/>a(e2)<sp/>@dots{}]\n\</highlight></codeline>
<codeline lineno="750"><highlight class="comment">@item<sp/>w\n\</highlight></codeline>
<codeline lineno="751"><highlight class="comment">gives<sp/>weighting<sp/>applied<sp/>to<sp/>each<sp/>band\n\</highlight></codeline>
<codeline lineno="752"><highlight class="comment">@item<sp/>ftype\n\</highlight></codeline>
<codeline lineno="753"><highlight class="comment">is<sp/>\&quot;bandpass\&quot;,<sp/>\&quot;hilbert\&quot;<sp/>or<sp/>\&quot;differentiator\&quot;\n\</highlight></codeline>
<codeline lineno="754"><highlight class="comment">@item<sp/>griddensity\n\</highlight></codeline>
<codeline lineno="755"><highlight class="comment">determines<sp/>how<sp/>accurately<sp/>the<sp/>filter<sp/>will<sp/>be\n\</highlight></codeline>
<codeline lineno="756"><highlight class="comment">constructed.<sp/>The<sp/>minimum<sp/>value<sp/>is<sp/>16,<sp/>but<sp/>higher<sp/>numbers<sp/>are\n\</highlight></codeline>
<codeline lineno="757"><highlight class="comment">slower<sp/>to<sp/>compute.\n\</highlight></codeline>
<codeline lineno="758"><highlight class="comment">@end<sp/>table\n\</highlight></codeline>
<codeline lineno="759"><highlight class="comment">\n\</highlight></codeline>
<codeline lineno="760"><highlight class="comment">Frequency<sp/>is<sp/>in<sp/>the<sp/>range<sp/>(0,<sp/>1),<sp/>with<sp/>1<sp/>being<sp/>the<sp/>Nyquist<sp/>frequency.\n\</highlight></codeline>
<codeline lineno="761"><highlight class="comment">@end<sp/>deftypefn&quot;)</highlight></codeline>
<codeline lineno="762"><highlight class="comment">{</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/>octave_value_list<sp/>retval;</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="765"><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/>int<sp/>nargin<sp/>=<sp/>args.length();</highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/>if<sp/>(nargin<sp/>&lt;<sp/>3<sp/>||<sp/>nargin<sp/>&gt;<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/>print_usage<sp/>();</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="comment"></highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/>int<sp/>numtaps<sp/>=<sp/>octave::math::nint<sp/>(args(0).double_value())<sp/>+<sp/>1;<sp/>//<sp/>#coeff<sp/>=<sp/>filter<sp/>order+1</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/>if<sp/>(numtaps<sp/>&lt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>number<sp/>of<sp/>taps<sp/>must<sp/>be<sp/>an<sp/>integer<sp/>greater<sp/>than<sp/>3&quot;);</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="comment"></highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/>ColumnVector<sp/>o_bands(args(1).vector_value());</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/>int<sp/>numbands<sp/>=<sp/>o_bands.numel()/2;</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/>OCTAVE_LOCAL_BUFFER(double,<sp/>bands,<sp/>numbands*2);</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>if<sp/>(numbands<sp/>&lt;<sp/>1<sp/>||<sp/>o_bands.numel()%2<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>must<sp/>have<sp/>an<sp/>even<sp/>number<sp/>of<sp/>band<sp/>edges&quot;);</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/>for<sp/>(i=1;<sp/>i<sp/>&lt;<sp/>o_bands.numel();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(o_bands(i)&lt;o_bands(i-1))<sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>error(&quot;band<sp/>edges<sp/>must<sp/>be<sp/>nondecreasing&quot;);</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/>if<sp/>(o_bands(0)<sp/>&lt;<sp/>0<sp/>||<sp/>o_bands(1)<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;band<sp/>edges<sp/>must<sp/>be<sp/>in<sp/>the<sp/>range<sp/>[0,1]&quot;);</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/>for(i=0;<sp/>i<sp/>&lt;<sp/>2*numbands;<sp/>i++)<sp/>bands[i]<sp/>=<sp/>o_bands(i)/2.0;</highlight></codeline>
<codeline lineno="796"><highlight class="comment"></highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/>ColumnVector<sp/>o_response(args(2).vector_value());</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/>OCTAVE_LOCAL_BUFFER<sp/>(double,<sp/>response,<sp/>numbands*2);</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/>if<sp/>(o_response.numel()<sp/>!=<sp/>o_bands.numel())<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>must<sp/>have<sp/>one<sp/>response<sp/>magnitude<sp/>for<sp/>each<sp/>band<sp/>edge&quot;);</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/>for(i=0;<sp/>i<sp/>&lt;<sp/>2*numbands;<sp/>i++)<sp/>response[i]<sp/>=<sp/>o_response(i);</highlight></codeline>
<codeline lineno="804"><highlight class="comment"></highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/>std::string<sp/>stype<sp/>=<sp/>std::string(&quot;bandpass&quot;);</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/>int<sp/>density<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/>OCTAVE_LOCAL_BUFFER<sp/>(double,<sp/>weight,<sp/>numbands);</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>numbands;<sp/>i++)<sp/>weight[i]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/>if<sp/>(nargin<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(args(3).is_string())</highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stype<sp/>=<sp/>args(3).string_value();</highlight></codeline>
<codeline lineno="812"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(args(3).is_real_matrix()<sp/>||<sp/>args(3).is_real_scalar())<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ColumnVector<sp/>o_weight(args(3).vector_value());</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(o_weight.numel()<sp/>!=<sp/>numbands)<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>need<sp/>one<sp/>weight<sp/>for<sp/>each<sp/>band<sp/>[=length(band)/2]&quot;);</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i=0;<sp/>i<sp/>&lt;<sp/>numbands;<sp/>i++)<sp/>weight[i]<sp/>=<sp/>o_weight(i);</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>incorrect<sp/>argument<sp/>list&quot;);</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/>if<sp/>(nargin<sp/>&gt;<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(args(4).is_string()<sp/>&amp;&amp;<sp/>!args(3).is_string())</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stype<sp/>=<sp/>args(4).string_value();</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(args(4).is_real_scalar())</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>octave::math::nint<sp/>(args(4).double_value());</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>incorrect<sp/>argument<sp/>list&quot;);</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/>if<sp/>(nargin<sp/>&gt;<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(args(5).is_real_scalar()</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!args(4).is_real_scalar())</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>octave::math::nint<sp/>(args(5).double_value());</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>incorrect<sp/>argument<sp/>list&quot;);</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/>int<sp/>itype;</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/>if<sp/>(stype<sp/>==<sp/>&quot;bandpass&quot;)</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/>itype<sp/>=<sp/>BANDPASS;</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/>else<sp/>if<sp/>(stype<sp/>==<sp/>&quot;differentiator&quot;)</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/><sp/><sp/><sp/>itype<sp/>=<sp/>DIFFERENTIATOR;</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/>else<sp/>if<sp/>(stype<sp/>==<sp/>&quot;hilbert&quot;)</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/>itype<sp/>=<sp/>HILBERT;</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>unknown<sp/>ftype<sp/>&apos;%s&apos;&quot;,<sp/>stype.data());</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="comment"></highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/>if<sp/>(density<sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>griddensity<sp/>is<sp/>too<sp/>low;<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>16&quot;);</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="comment"></highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/>OCTAVE_LOCAL_BUFFER<sp/>(double,<sp/>coeff,<sp/>numtaps+5);</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/>int<sp/>err<sp/>=<sp/>remez(coeff,numtaps,numbands,bands,response,weight,itype,density);</highlight></codeline>
<codeline lineno="864"><highlight class="comment"></highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/>if<sp/>(err<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/><sp/><sp/><sp/>warning(&quot;remez:<sp/>--<sp/>failed<sp/>to<sp/>converge<sp/>--<sp/>returned<sp/>filter<sp/>may<sp/>be<sp/>bad.&quot;);</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/>else<sp/>if<sp/>(err<sp/>==<sp/>-2)<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>insufficient<sp/>extremals--cannot<sp/>continue&quot;);</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/>else<sp/>if<sp/>(err<sp/>==<sp/>-3)<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/><sp/><sp/>error(&quot;remez:<sp/>too<sp/>many<sp/>extremals--cannot<sp/>continue&quot;);</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>retval;</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="comment"></highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/>ColumnVector<sp/>h(numtaps);</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/>while(numtaps--)<sp/>h(numtaps)<sp/>=<sp/>coeff[numtaps];</highlight></codeline>
<codeline lineno="878"><highlight class="comment"></highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/>return<sp/>octave_value(h);</highlight></codeline>
<codeline lineno="880"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="883"><highlight class="comment">%!test</highlight></codeline>
<codeline lineno="884"><highlight class="comment">%!<sp/>b<sp/>=<sp/>[</highlight></codeline>
<codeline lineno="885"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0415131831103279</highlight></codeline>
<codeline lineno="886"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0581639884202646</highlight></codeline>
<codeline lineno="887"><highlight class="comment">%!<sp/><sp/><sp/>-0.0281579212691008</highlight></codeline>
<codeline lineno="888"><highlight class="comment">%!<sp/><sp/><sp/>-0.0535575358002337</highlight></codeline>
<codeline lineno="889"><highlight class="comment">%!<sp/><sp/><sp/>-0.0617245915143180</highlight></codeline>
<codeline lineno="890"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0507753178978075</highlight></codeline>
<codeline lineno="891"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.2079018331396460</highlight></codeline>
<codeline lineno="892"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.3327160895375440</highlight></codeline>
<codeline lineno="893"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.3327160895375440</highlight></codeline>
<codeline lineno="894"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.2079018331396460</highlight></codeline>
<codeline lineno="895"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0507753178978075</highlight></codeline>
<codeline lineno="896"><highlight class="comment">%!<sp/><sp/><sp/>-0.0617245915143180</highlight></codeline>
<codeline lineno="897"><highlight class="comment">%!<sp/><sp/><sp/>-0.0535575358002337</highlight></codeline>
<codeline lineno="898"><highlight class="comment">%!<sp/><sp/><sp/>-0.0281579212691008</highlight></codeline>
<codeline lineno="899"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0581639884202646</highlight></codeline>
<codeline lineno="900"><highlight class="comment">%!<sp/><sp/><sp/><sp/>0.0415131831103279];</highlight></codeline>
<codeline lineno="901"><highlight class="comment">%!<sp/>assert(remez(15,[0,0.3,0.4,1],[1,1,0,0]),b,1e-14);</highlight></codeline>
<codeline lineno="902"><highlight class="comment"></highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="rx_signal_processing/remez.c"/>
  </compounddef>
</doxygen>

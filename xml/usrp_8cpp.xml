<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="usrp_8cpp" kind="file" language="C++">
    <compoundname>usrp.cpp</compoundname>
    <includes local="no">uhd/usrp/multi_usrp.hpp</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="usrp_8hpp" local="yes">usrp_drivers/n200/usrp.hpp</includes>
    <includes local="yes">utils/driver_options/driveroptions.hpp</includes>
    <incdepgraph>
      <node id="96">
        <label>string</label>
      </node>
      <node id="93">
        <label>usrp_drivers/n200/usrp.cpp</label>
        <link refid="usrp.cpp"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>utils/driver_options/driveroptions.hpp</label>
      </node>
      <node id="97">
        <label>vector</label>
      </node>
      <node id="98">
        <label>usrp_drivers/n200/usrp.hpp</label>
        <link refid="usrp_8hpp_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>uhd/usrp/multi_usrp.hpp</label>
      </node>
      <node id="95">
        <label>memory</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>2016<sp/>SuperDARN</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">See<sp/>LICENSE<sp/>for<sp/>details.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/>@file<sp/>usrp.cpp</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>This<sp/>file<sp/>contains<sp/>the<sp/>implementations<sp/>for<sp/>USRP<sp/>related<sp/>classes.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/usrp/multi_usrp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usrp_drivers/n200/usrp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/driver_options/driveroptions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><ref refid="classUSRP_1ae0816425ed6a064d7f94ffd14206741e" kindref="member">USRP::USRP</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DriverOptions&amp;<sp/>driver_options)</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>mboard_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>gpio_bank_<sp/>=<sp/>driver_options.get_gpio_bank();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>scope_sync_mask_<sp/>=<sp/>driver_options.get_scope_sync_mask();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>atten_mask_<sp/>=<sp/>driver_options.get_atten_mask();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>tr_mask_<sp/>=<sp/>driver_options.get_tr_mask();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>usrp_<sp/>=<sp/>uhd::usrp::multi_usrp::make(driver_options.get_device_args());</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>first<sp/>four<sp/>GPIO<sp/>on<sp/>gpio_bank_<sp/>to<sp/>output,<sp/>the<sp/>rest<sp/>are<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;DDR&quot;</highlight><highlight class="normal">,<sp/>0x000F,<sp/>0xFFFF);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1a6c0cf4ec10d63df0feb833ca7193f9c5" kindref="member">set_usrp_clock_source</ref>(driver_options.get_ref());</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1adc7b4350ee14217a1cc0bce7b4083672" kindref="member">set_tx_subdev</ref>(driver_options.get_tx_subdev());</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1a185f6c94e133d06540956f9f76fd8552" kindref="member">set_main_rx_subdev</ref>(driver_options.get_main_rx_subdev());</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1a0c4796b6b551a7dacb5a47250b1ead87" kindref="member">set_interferometer_rx_subdev</ref>(driver_options.get_interferometer_rx_subdev(),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>driver_options.get_interferometer_antenna_count());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/><sp/>receive_channels<sp/>=<sp/>create_receive_channels(driver_options.get_main_antenna_count(),</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>driver_options.get_interferometer_antenna_count());*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1a36831b76a4b0085eb7ce7a6d68d844e2" kindref="member">set_time_source</ref>(driver_options.get_pps());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="classUSRP_1a06dc19d3b5275b043dac6d9578311287" kindref="member">check_ref_locked</ref>();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>set_atr_gpios();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a6c0cf4ec10d63df0feb833ca7193f9c5" kindref="member">USRP::set_usrp_clock_source</ref>(std::string<sp/>source)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_clock_source(source);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1adc7b4350ee14217a1cc0bce7b4083672" kindref="member">USRP::set_tx_subdev</ref>(std::string<sp/>tx_subdev)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_tx_subdev_spec(tx_subdev);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1ad7a86c9090ae50a26fe0ead782f680b1" kindref="member">USRP::set_tx_rate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tx_rate,<sp/>std::vector&lt;size_t&gt;<sp/>chs)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx_rate<sp/>&lt;=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//todo(keith):<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_tx_rate(tx_rate);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ch<sp/>:<sp/>chs)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>actual_rate<sp/>=<sp/>usrp_-&gt;get_tx_rate(ch);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate_1<sp/>=<sp/>usrp_-&gt;get_tx_rate(chs[0]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_rate<sp/>!=<sp/>rate_1)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO(keith):<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_tx_rate(chs[0]);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a2330eadde3feb6577b25f34372613084" kindref="member">USRP::get_tx_rate</ref>(uint32_t<sp/>channel)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_tx_rate(channel);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1af0656e9048b499789d610b8a1fa4fd38" kindref="member">USRP::set_tx_center_freq</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/>std::vector&lt;size_t&gt;<sp/>chs)</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>uhd::tune_request_t<sp/>tune_request(freq);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>chs)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_tx_freq(tune_request,<sp/>channel);<sp/></highlight><highlight class="comment">//TODO(keith):<sp/>test<sp/>tune<sp/>request.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>actual_freq<sp/>=<sp/>usrp_-&gt;get_tx_freq(channel);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_freq<sp/>!=<sp/>freq)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO(Keith):<sp/>something*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>varying<sp/>USRPs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>chs)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>actual_freq<sp/>=<sp/>usrp_-&gt;get_tx_freq(channel);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>freq_1<sp/>=<sp/>usrp_-&gt;get_tx_freq(chs[0]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_freq<sp/>!=<sp/>freq_1)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_tx_freq(chs[0]);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a185f6c94e133d06540956f9f76fd8552" kindref="member">USRP::set_main_rx_subdev</ref>(std::string<sp/>main_subdev)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_rx_subdev_spec(main_subdev);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REVIEW<sp/>#43<sp/>It<sp/>would<sp/>be<sp/>best<sp/>if<sp/>we<sp/>could<sp/>have<sp/>in<sp/>the<sp/>config<sp/>file<sp/>a<sp/>map<sp/>of<sp/>direct<sp/>antenna<sp/>to<sp/>USRP<sp/>box/subdev/channel<sp/>so<sp/>you<sp/>can<sp/>change<sp/>the<sp/>interferometer<sp/>to<sp/>a<sp/>different<sp/>set<sp/>of<sp/>boxes<sp/>for<sp/>example.<sp/>Also<sp/>if<sp/>a<sp/>rx<sp/>daughterboard<sp/>stopped<sp/>working<sp/>and<sp/>you<sp/>needed<sp/>to<sp/>move<sp/>both<sp/>main<sp/>and<sp/>int<sp/>to<sp/>a<sp/>totally<sp/>different<sp/>box<sp/>for<sp/>receive,<sp/>then<sp/>you<sp/>could<sp/>do<sp/>that.<sp/>This<sp/>would<sp/>be<sp/>useful<sp/>for<sp/>both<sp/>rx<sp/>and<sp/>tx<sp/>channels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REPLY<sp/>OKAY,<sp/>but<sp/>maybe<sp/>we<sp/>should<sp/>leave<sp/>it<sp/>for<sp/>now.<sp/>That&apos;s<sp/>easier<sp/>said<sp/>than<sp/>done.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a0c4796b6b551a7dacb5a47250b1ead87" kindref="member">USRP::set_interferometer_rx_subdev</ref>(std::string<sp/>interferometer_subdev,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>interferometer_antenna_count)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i=0;<sp/>i&lt;interferometer_antenna_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_rx_subdev_spec(interferometer_subdev,<sp/>i);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/*std::vector&lt;size_t&gt;<sp/>USRP::create_receive_channels(uint32_t<sp/>main_antenna_count,</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>interferometer_antenna_count)<sp/>//TODO(keith):<sp/>add<sp/>channel<sp/>mapping</highlight></codeline>
<codeline lineno="197"><highlight class="comment">{</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>channels;</highlight></codeline>
<codeline lineno="200"><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>//Add<sp/>the<sp/>main<sp/>array<sp/>channels<sp/>from<sp/>the<sp/>mboards<sp/>that<sp/>will<sp/>also<sp/>be<sp/>receiving<sp/>the</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>//interferometer<sp/>samples</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>for(uint32_t<sp/>i=0;<sp/>i&lt;interferometer_antenna_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/><sp/>channels.push_back(2*i);</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>//starts<sp/>at<sp/>2<sp/>*<sp/>i_count<sp/>since<sp/>those<sp/>channels<sp/>are<sp/>interleaved</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>auto<sp/>start<sp/>=<sp/>2<sp/>*<sp/>interferometer_antenna_count;</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>auto<sp/>end<sp/>=<sp/>main_antenna_count<sp/>+<sp/>interferometer_antenna_count;</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>//Add<sp/>the<sp/>rest<sp/>of<sp/>main<sp/>array<sp/>channels</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>for(uint32_t<sp/>i=start;<sp/>i&lt;end;<sp/>i++){</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/><sp/><sp/>channels.push_back(i);</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>//Now<sp/>add<sp/>the<sp/>interferometer<sp/>channels</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>for(uint32_t<sp/>i=0;<sp/>i&lt;interferometer_antenna_count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>channels.push_back(2*i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="comment"></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>return<sp/>channels;</highlight></codeline>
<codeline lineno="222"><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">}</highlight></codeline>
<codeline lineno="224"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="230"><highlight class="comment">/*std::vector&lt;size_t&gt;<sp/>USRP::get_receive_channels()</highlight></codeline>
<codeline lineno="231"><highlight class="comment">{</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/>return<sp/>receive_channels;</highlight></codeline>
<codeline lineno="233"><highlight class="comment">}</highlight></codeline>
<codeline lineno="234"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="240"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1afa1efa80fcb31a8422ce118189d0e6e3" kindref="member">USRP::set_rx_rate</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rx_rate,<sp/>std::vector&lt;size_t&gt;<sp/>rx_chs)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_rx_rate(rx_rate);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>varying<sp/>USRPs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>rx_chs)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>actual_freq<sp/>=<sp/>usrp_-&gt;get_rx_freq(channel);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>freq_1<sp/>=<sp/>usrp_-&gt;get_rx_freq(rx_chs[0]);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_freq<sp/>!=<sp/>freq_1)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_rx_freq(rx_chs[0]);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a20942898561a12aa4c14de69cf5cc341" kindref="member">USRP::set_rx_center_freq</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/>std::vector&lt;size_t&gt;<sp/>chs)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>uhd::tune_request_t<sp/>tune_request(freq);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>chs)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_rx_freq(tune_request,<sp/>channel);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>actual_freq<sp/>=<sp/>usrp_-&gt;get_rx_freq(channel);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_freq<sp/>!=<sp/>freq)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*TODO:<sp/>something*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//return<sp/>will<sp/>assume<sp/>that<sp/>the<sp/>set<sp/>frequency<sp/>of<sp/>one<sp/>USRP<sp/>is<sp/>the<sp/>same<sp/>as<sp/>all<sp/>of<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_rx_freq(chs[0]);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a36831b76a4b0085eb7ce7a6d68d844e2" kindref="member">USRP::set_time_source</ref>(std::string<sp/>source)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(source<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;external&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_time_source(source);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_time_unknown_pps(uhd::time_spec_t(0.0));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>usrp_-&gt;set_time_now(0.0);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a06dc19d3b5275b043dac6d9578311287" kindref="member">USRP::check_ref_locked</ref>()</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_boards<sp/>=<sp/>usrp_-&gt;get_num_mboards();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_boards;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>sensor_names;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>sensor_names<sp/>=<sp/>usrp_-&gt;get_mboard_sensor_names(i);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((std::find(sensor_names.begin(),<sp/>sensor_names.end(),<sp/></highlight><highlight class="stringliteral">&quot;ref_locked&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>sensor_names.end()))<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uhd::sensor_value_t<sp/>ref_locked<sp/>=<sp/>usrp_-&gt;get_mboard_sensor(</highlight><highlight class="stringliteral">&quot;ref_locked&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>TODO:<sp/>something<sp/>like<sp/>this</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>UHD_ASSERT_THROW(ref_locked.to_bool());</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(Keith):<sp/>Get<sp/>an<sp/>else<sp/>statement<sp/>and<sp/>do<sp/>something<sp/>if<sp/>there&apos;s<sp/>no<sp/>ref_locked<sp/>sensor<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1abf842a3e9a41b6bf509d195fef659d05" kindref="member">USRP::set_scope_sync</ref>(uhd::time_spec_t<sp/>scope_high)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(scope_high);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>scope_sync_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1af892eb152a034b58353b16d2bbb587bf" kindref="member">USRP::set_atten</ref>(uhd::time_spec_t<sp/>atten_high)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(atten_high);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>atten_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a2abaced689292f18466e984719c07790" kindref="member">USRP::set_tr</ref>(uhd::time_spec_t<sp/>tr_high)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(tr_high);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>tr_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a8df601f93bd92e3b3fb7acf52988ed3f" kindref="member">USRP::clear_scope_sync</ref>(uhd::time_spec_t<sp/>scope_low)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(scope_low);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0x0000,<sp/>scope_sync_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a12d3e326cd03e0ddfea6edc29aa1b80d" kindref="member">USRP::clear_atten</ref>(uhd::time_spec_t<sp/>atten_low)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(atten_low);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0x0000,<sp/>atten_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1a61033961122a1afdfa9b6a50bdfae1f1" kindref="member">USRP::clear_tr</ref>(uhd::time_spec_t<sp/>tr_low)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_command_time(tr_low);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;OUT&quot;</highlight><highlight class="normal">,<sp/>0x0000,<sp/>tr_mask_,<sp/>mboard_);</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classUSRP_1ae8025671f588c43b5768fb4209435896" kindref="member">USRP::clear_command_times</ref>()</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>usrp_-&gt;clear_command_time();</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>USRP::set_atr_gpios()</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;CTRL&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b11111111,<sp/>mboard_);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;DDR&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b11111111,<sp/>mboard_);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Mirror<sp/>pins<sp/>along<sp/>bank<sp/>for<sp/>easier<sp/>scoping.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_RX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00000001,<sp/>mboard_);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_RX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00000010,<sp/>mboard_);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_TX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00000100,<sp/>mboard_);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_TX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00001000,<sp/>mboard_);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//XX<sp/>is<sp/>the<sp/>actual<sp/>TR<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_XX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00010000,<sp/>mboard_);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_XX&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b00100000,<sp/>mboard_);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//0X<sp/>acts<sp/>as<sp/>&apos;scope<sp/>sync&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_0X&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b01000000,<sp/>mboard_);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>usrp_-&gt;set_gpio_attr(gpio_bank_,<sp/></highlight><highlight class="stringliteral">&quot;ATR_0X&quot;</highlight><highlight class="normal">,<sp/>0xFFFF,<sp/>0b10000000,<sp/>mboard_);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">uhd::time_spec_t<sp/><ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">USRP::get_current_usrp_time</ref>()</highlight></codeline>
<codeline lineno="432"><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_time_now();</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">uhd::rx_streamer::sptr<sp/><ref refid="classUSRP_1a0466c9207c6a06169adfdfbbc91b5d6e" kindref="member">USRP::get_usrp_rx_stream</ref>(uhd::stream_args_t<sp/>stream_args)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_rx_stream(stream_args);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal">uhd::tx_streamer::sptr<sp/><ref refid="classUSRP_1a38d58a62df34bfe1204297b13269265d" kindref="member">USRP::get_usrp_tx_stream</ref>(uhd::stream_args_t<sp/>stream_args)</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_-&gt;get_tx_stream(stream_args);</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REVIEW<sp/>#6<sp/>TODO<sp/>create<sp/>a<sp/>set<sp/>and<sp/>clear<sp/>for<sp/>new<sp/>method<sp/>of<sp/>timing<sp/>that<sp/>is<sp/>a<sp/>hybrid<sp/>between<sp/>atten<sp/>and<sp/>t/r<sp/>(we<sp/>are<sp/>only<sp/>using<sp/>one<sp/>pin<sp/>for<sp/>both<sp/>and<sp/>breaking<sp/>off<sp/>on<sp/>separate<sp/>board)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">uhd::usrp::multi_usrp::sptr<sp/><ref refid="classUSRP_1ad63412ef4f989f41fd042ba3398857fd" kindref="member">USRP::get_usrp</ref>()</highlight></codeline>
<codeline lineno="468"><highlight class="normal">{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>usrp_;</highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">std::string<sp/><ref refid="classUSRP_1a35b40fc53946a2d9c7c42c4546d195a3" kindref="member">USRP::to_string</ref>(std::vector&lt;size_t&gt;<sp/>tx_chs,<sp/>std::vector&lt;size_t&gt;<sp/>rx_chs)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>std::stringstream<sp/>device_str;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//printable<sp/>summary<sp/>of<sp/>the<sp/>device.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>device_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Using<sp/>device<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>usrp_-&gt;get_pp_string()<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TX<sp/>rate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>usrp_-&gt;get_tx_rate()/1e6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Msps&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RX<sp/>rate<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>usrp_-&gt;get_rx_rate()/1e6<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Msps&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>tx_chs)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>device_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;TX<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>channel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>freq<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>usrp_-&gt;get_tx_freq(channel)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MHz&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;channel<sp/>:<sp/>rx_chs)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>device_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;RX<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>channel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>freq<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>usrp_-&gt;get_rx_freq(channel)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>MHz&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>device_str.str();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><ref refid="classTXMetadata_1a41d7af4efec01c46c09586cd580ee517" kindref="member">TXMetadata::TXMetadata</ref>()</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>md_.start_of_burst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>md_.end_of_burst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>md_.has_time_spec<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>md_.time_spec<sp/>=<sp/>uhd::time_spec_t(0.0);</highlight></codeline>
<codeline lineno="514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal">uhd::tx_metadata_t<sp/><ref refid="classTXMetadata_1a8f6662d91b955dcbee102e9a8d980af6" kindref="member">TXMetadata::get_md</ref>()</highlight></codeline>
<codeline lineno="522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTXMetadata_1acb44e372f84e9ea7b6a01e919066b173" kindref="member">TXMetadata::set_start_of_burst</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>start_of_burst)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>md_.start_of_burst<sp/>=<sp/>start_of_burst;</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTXMetadata_1a5129347c6ba247777c8c3da74c0085fb" kindref="member">TXMetadata::set_end_of_burst</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>end_of_burst)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>md_.end_of_burst<sp/>=<sp/>end_of_burst;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTXMetadata_1a21c556e974e44f1f90cfb760677574a7" kindref="member">TXMetadata::set_has_time_spec</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_time_spec)</highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>md_.has_time_spec<sp/>=<sp/>has_time_spec;</highlight></codeline>
<codeline lineno="554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classTXMetadata_1a5622e555c4a19793eb36f5964cd2fdd2" kindref="member">TXMetadata::set_time_spec</ref>(uhd::time_spec_t<sp/>time_spec)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>md_.time_spec<sp/>=<sp/>time_spec;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">uhd::rx_metadata_t&amp;<sp/><ref refid="classRXMetadata_1a3173bb38aa61e0513ab98f9d5e290465" kindref="member">RXMetadata::get_md</ref>()</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_;</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRXMetadata_1aeec553aad9cf46fc12b8aa0b0794b477" kindref="member">RXMetadata::get_end_of_burst</ref>()</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.end_of_burst;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">uhd::rx_metadata_t::error_code_t<sp/><ref refid="classRXMetadata_1a43f0ea91f207e89b06dc1c53ceb4d23d" kindref="member">RXMetadata::get_error_code</ref>()</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.error_code;</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classRXMetadata_1a7439aa14b6c8213854a3b2c0942c08cb" kindref="member">RXMetadata::get_fragment_offset</ref>()</highlight></codeline>
<codeline lineno="604"><highlight class="normal">{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.fragment_offset;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRXMetadata_1a2b0340831019a899a45a560970056d75" kindref="member">RXMetadata::get_has_time_spec</ref>()</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.has_time_spec;</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRXMetadata_1ab77af1cf51ccc90fb2cc3c70fc04d9f3" kindref="member">RXMetadata::get_out_of_sequence</ref>()</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.out_of_sequence;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classRXMetadata_1a5d340412c05f1d228182ef547ff6daaa" kindref="member">RXMetadata::get_start_of_burst</ref>()</highlight></codeline>
<codeline lineno="634"><highlight class="normal">{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.start_of_burst;</highlight></codeline>
<codeline lineno="636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal">uhd::time_spec_t<sp/><ref refid="classRXMetadata_1a4ce77e92b94fd8277f5ab94947d1cd9b" kindref="member">RXMetadata::get_time_spec</ref>()</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>md_.time_spec;</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="usrp_drivers/n200/usrp.cpp"/>
  </compounddef>
</doxygen>

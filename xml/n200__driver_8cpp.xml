<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="n200__driver_8cpp" kind="file" language="C++">
    <compoundname>n200_driver.cpp</compoundname>
    <includes local="no">unistd.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">uhd/utils/thread_priority.hpp</includes>
    <includes local="no">uhd/utils/safe_main.hpp</includes>
    <includes local="no">uhd/utils/static.hpp</includes>
    <includes local="no">uhd/usrp/multi_usrp.hpp</includes>
    <includes local="no">uhd/exception.hpp</includes>
    <includes local="no">boost/interprocess/shared_memory_object.hpp</includes>
    <includes local="no">boost/interprocess/mapped_region.hpp</includes>
    <includes local="no">boost/interprocess/file_mapping.hpp</includes>
    <includes local="no">zmq.hpp</includes>
    <includes local="no">chrono</includes>
    <includes local="no">complex</includes>
    <includes local="no">limits</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">utility</includes>
    <includes local="no">fstream</includes>
    <includes local="no">memory</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">thread</includes>
    <includes local="no">cstdlib</includes>
    <includes local="yes">utils/driver_options/driveroptions.hpp</includes>
    <includes local="yes">utils/options/options.hpp</includes>
    <includes local="no">boost/property_tree/ptree.hpp</includes>
    <includes refid="usrp_8hpp" local="yes">usrp_drivers/n200/usrp.hpp</includes>
    <includes local="yes">utils/protobuf/driverpacket.pb.h</includes>
    <includes local="yes">utils/protobuf/rxsamplesmetadata.pb.h</includes>
    <includes local="yes">utils/shared_memory/shared_memory.hpp</includes>
    <includes local="yes">utils/shared_macros/shared_macros.hpp</includes>
    <incdepgraph>
      <node id="74">
        <label>limits</label>
      </node>
      <node id="62">
        <label>stdint.h</label>
      </node>
      <node id="70">
        <label>boost/interprocess/file_mapping.hpp</label>
      </node>
      <node id="81">
        <label>string</label>
      </node>
      <node id="67">
        <label>uhd/exception.hpp</label>
      </node>
      <node id="78">
        <label>fstream</label>
      </node>
      <node id="69">
        <label>boost/interprocess/mapped_region.hpp</label>
      </node>
      <node id="71">
        <label>zmq.hpp</label>
      </node>
      <node id="84">
        <label>utils/driver_options/driveroptions.hpp</label>
      </node>
      <node id="85">
        <label>utils/options/options.hpp</label>
      </node>
      <node id="63">
        <label>uhd/utils/thread_priority.hpp</label>
      </node>
      <node id="61">
        <label>unistd.h</label>
      </node>
      <node id="80">
        <label>vector</label>
      </node>
      <node id="90">
        <label>utils/shared_memory/shared_memory.hpp</label>
      </node>
      <node id="89">
        <label>utils/protobuf/rxsamplesmetadata.pb.h</label>
      </node>
      <node id="77">
        <label>utility</label>
      </node>
      <node id="68">
        <label>boost/interprocess/shared_memory_object.hpp</label>
      </node>
      <node id="76">
        <label>sstream</label>
      </node>
      <node id="65">
        <label>uhd/utils/static.hpp</label>
      </node>
      <node id="60">
        <label>usrp_drivers/n200/n200_driver.cpp</label>
        <link refid="n200_driver.cpp"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>utils/shared_macros/shared_macros.hpp</label>
      </node>
      <node id="83">
        <label>cstdlib</label>
      </node>
      <node id="86">
        <label>boost/property_tree/ptree.hpp</label>
      </node>
      <node id="87">
        <label>usrp_drivers/n200/usrp.hpp</label>
        <link refid="usrp_8hpp_source"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>iostream</label>
      </node>
      <node id="64">
        <label>uhd/utils/safe_main.hpp</label>
      </node>
      <node id="72">
        <label>chrono</label>
      </node>
      <node id="66">
        <label>uhd/usrp/multi_usrp.hpp</label>
      </node>
      <node id="82">
        <label>thread</label>
      </node>
      <node id="88">
        <label>utils/protobuf/driverpacket.pb.h</label>
      </node>
      <node id="73">
        <label>complex</label>
      </node>
      <node id="79">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="n200__driver_8cpp_1a1ea8d4d05d2c077a87b826084fbb3c42" prot="public" static="no">
        <name>SET_TIME_COMMAND_DELAY</name>
        <initializer>3e-3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="35" column="9" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n200__driver_8cpp_1a9df6265651c6a92906e2063ef04693d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; size_t &gt;</type>
        <definition>std::vector&lt;size_t&gt; make_tx_channels</definition>
        <argsstring>(const driverpacket::DriverPacket &amp;driver_packet)</argsstring>
        <name>make_tx_channels</name>
        <param>
          <type>const driverpacket::DriverPacket &amp;</type>
          <declname>driver_packet</declname>
        </param>
        <briefdescription>
<para>Makes a vector of <ref refid="classUSRP" kindref="compound">USRP</ref> TX channels from a driver packet. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>A received driver packet from radar_control.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of TX channels to use.</para></simplesect>
Values in a protobuffer have no contiguous underlying storage so values need to be parsed into a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="46" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1a5fae399951c5b1b5e2a08af030041cd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::complex&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::complex&lt;float&gt; &gt; &gt; make_tx_samples</definition>
        <argsstring>(const driverpacket::DriverPacket &amp;driver_packet)</argsstring>
        <name>make_tx_samples</name>
        <param>
          <type>const driverpacket::DriverPacket &amp;</type>
          <declname>driver_packet</declname>
        </param>
        <briefdescription>
<para>Makes a set of vectors of the samples for each TX channel from the driver packet. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver_packet</parametername>
</parameternamelist>
<parameterdescription>
<para>A received driver packet from radar_control.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A set of vectors of TX samples for each <ref refid="classUSRP" kindref="compound">USRP</ref> channel.</para></simplesect>
Values in a protobuffer have no contiguous underlying storage so values need to be parsed into a vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="65" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="65" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1a2ab9906b01d4783383f88f975883d79e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void transmit</definition>
        <argsstring>(zmq::context_t &amp;driver_c, USRP &amp;usrp_d, const DriverOptions &amp;driver_options)</argsstring>
        <name>transmit</name>
        <param>
          <type>zmq::context_t &amp;</type>
          <declname>driver_c</declname>
        </param>
        <param>
          <type><ref refid="classUSRP" kindref="compound">USRP</ref> &amp;</type>
          <declname>usrp_d</declname>
        </param>
        <param>
          <type>const DriverOptions &amp;</type>
          <declname>driver_options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="91" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="91" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1ad32900a09f1e1cbf99c25e41c8af70ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string random_string</definition>
        <argsstring>(size_t length)</argsstring>
        <name>random_string</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Generates a string of random characters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of desired string.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string of random characters.</para></simplesect>
This string is used for creation of named shared memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="350" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="350" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1aa1662de0e3d8e5a18c9a95e64a3cae56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void receive</definition>
        <argsstring>(zmq::context_t &amp;driver_c, USRP &amp;usrp_d, const DriverOptions &amp;driver_options)</argsstring>
        <name>receive</name>
        <param>
          <type>zmq::context_t &amp;</type>
          <declname>driver_c</declname>
        </param>
        <param>
          <type><ref refid="classUSRP" kindref="compound">USRP</ref> &amp;</type>
          <declname>usrp_d</declname>
        </param>
        <param>
          <type>const DriverOptions &amp;</type>
          <declname>driver_options</declname>
        </param>
        <briefdescription>
<para>Runs in a seperate thread to control receiving from the USRPs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver_c</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver ZMQ context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usrp_d</parametername>
</parameternamelist>
<parameterdescription>
<para>The multi-USRP SuperDARN wrapper object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">driver_options</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver options parsed from config. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="374" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="374" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1a93bf510fee1438d7b6a1b2fbd19e78e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void control</definition>
        <argsstring>(zmq::context_t &amp;driver_c, const DriverOptions &amp;driver_options)</argsstring>
        <name>control</name>
        <param>
          <type>zmq::context_t &amp;</type>
          <declname>driver_c</declname>
        </param>
        <param>
          <type>const DriverOptions &amp;</type>
          <declname>driver_options</declname>
        </param>
        <briefdescription>
<para>Runs in a seperate thread to act as an interface for the ingress and egress data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">driver_c</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver ZMQ context. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="581" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="581" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="n200__driver_8cpp_1a82d079f4137e388bbe0120d14079d6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int UHD_SAFE_MAIN</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>UHD_SAFE_MAIN</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>UHD wrapped main function to start threads. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>EXIT_SUCCESS</para></simplesect>
Creates a new multi-USRP object using parameters from config file. Starts control, receive, and transmit threads to operate on the multi-USRP object. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="usrp_drivers/n200/n200_driver.cpp" line="668" column="1" bodyfile="usrp_drivers/n200/n200_driver.cpp" bodystart="668" bodyend="706"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*Copyright<sp/>2016<sp/>SuperDARN*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/utils/thread_priority.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/utils/safe_main.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/utils/static.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/usrp/multi_usrp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/exception.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/shared_memory_object.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/mapped_region.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/file_mapping.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;zmq.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/driver_options/driveroptions.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;usrp_drivers/n200/usrp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/protobuf/driverpacket.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/protobuf/rxsamplesmetadata.pb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/shared_memory/shared_memory.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;utils/shared_macros/shared_macros.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//Delay<sp/>needed<sp/>for<sp/>before<sp/>any<sp/>set_time_commands<sp/>will<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_TIME_COMMAND_DELAY<sp/>3e-3<sp/>//<sp/>seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::vector&lt;size_t&gt;<sp/>make_tx_channels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>driverpacket::DriverPacket<sp/>&amp;driver_packet)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>channels(driver_packet.channels_size());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;driver_packet.channels_size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>channels[i]<sp/>=<sp/>driver_packet.channels(i);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>channels;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">std::vector&lt;std::vector&lt;std::complex&lt;float&gt;&gt;&gt;<sp/>make_tx_samples(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>driverpacket::DriverPacket</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;driver_packet)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;std::complex&lt;float&gt;&gt;&gt;<sp/>samples(driver_packet.channel_samples_size());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel=0;<sp/>channel&lt;driver_packet.channel_samples_size();<sp/>channel++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_samps<sp/>=<sp/>driver_packet.channel_samples(channel).real_size();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::complex&lt;float&gt;&gt;<sp/>v(num_samps);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>smp<sp/>=<sp/>driver_packet.channel_samples(channel);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>smp_num<sp/>=<sp/>0;<sp/>smp_num<sp/>&lt;<sp/>num_samps;<sp/>smp_num++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v[smp_num]<sp/>=<sp/>std::complex&lt;float&gt;(smp.real(smp_num),smp.imag(smp_num));</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>samples[channel]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;s<sp/>:<sp/>samples)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s.size()<sp/>!=<sp/>samples[0].size())</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>Handle<sp/>this<sp/>error.<sp/>Samples<sp/>buffers<sp/>are<sp/>of<sp/>different<sp/>lengths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>samples;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>transmit(zmq::context_t<sp/>&amp;driver_c,<sp/><ref refid="classUSRP" kindref="compound">USRP</ref><sp/>&amp;usrp_d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DriverOptions<sp/>&amp;driver_options)</highlight></codeline>
<codeline lineno="92"><highlight class="normal">{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Enter<sp/>transmit<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>driver_packet_pub_socket(driver_c,<sp/>ZMQ_SUB);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.connect(</highlight><highlight class="stringliteral">&quot;inproc://threads&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.setsockopt(ZMQ_SUBSCRIBE,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0))</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[34m\033[34mTRANSMIT\033[0m\033[0m<sp/>Creating<sp/>and<sp/>connected<sp/>to<sp/>thread<sp/>socket<sp/>in<sp/>control&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>receive_side_timing_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>receive_side_timing_socket.connect(</highlight><highlight class="stringliteral">&quot;inproc://timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>ack_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(ack_socket.connect(</highlight><highlight class="stringliteral">&quot;inproc://ack&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>usrp_channels_set<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>center_freq_set<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>samples_set<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>std::vector&lt;size_t&gt;<sp/>channels;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>uhd::time_spec_t<sp/>time_zero;<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>zmq::message_t<sp/>start_receive_timing<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(time_zero));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>uhd::tx_streamer::sptr<sp/>tx_stream;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>uhd::stream_args_t<sp/>stream_args(</highlight><highlight class="stringliteral">&quot;fc32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sc16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>samples_per_buff;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;std::complex&lt;float&gt;&gt;&gt;<sp/>samples;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>atten_window_time_start_s<sp/>=<sp/>driver_options.get_atten_window_time_start();<sp/></highlight><highlight class="comment">//seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>atten_window_time_end_s<sp/>=<sp/>driver_options.get_atten_window_time_end();<sp/></highlight><highlight class="comment">//seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tr_window_time_s<sp/>=<sp/>driver_options.get_tr_window_time();<sp/></highlight><highlight class="comment">//seconds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//default<sp/>initialize<sp/>SS.<sp/>Needs<sp/>to<sp/>be<sp/>outside<sp/>of<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scope_sync_low<sp/>=<sp/>uhd::time_spec_t(0.0);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sqn_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>uint32_t<sp/>expected_sqn_num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//TODO(keith):<sp/>If<sp/>there<sp/>are<sp/>large<sp/>periods<sp/>of<sp/>time<sp/>between<sp/>pulses,<sp/>this<sp/>while<sp/>loop<sp/>might<sp/>be<sp/>too<sp/>speedy,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//resulting<sp/>in<sp/>overflows<sp/>to<sp/>the<sp/>usrp<sp/>-<sp/>may<sp/>have<sp/>seen<sp/>this<sp/>in<sp/>testing?<sp/>-<sp/>can<sp/>we<sp/>calculate<sp/>an<sp/>amount<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>to<sp/>sleep<sp/>if<sp/>that&apos;s<sp/>the<sp/>case?<sp/>Discuss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//we<sp/>tested<sp/>very<sp/>large<sp/>spaces<sp/>in<sp/>pulses.<sp/>upwards<sp/>of<sp/>10-20<sp/>seconds<sp/>using<sp/>a<sp/>a<sp/>single<sp/>USRP.<sp/>It<sp/>appears<sp/>that<sp/>all<sp/>rf/IO/and<sp/>recv<sp/>all<sp/>seem<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*This<sp/>loop<sp/>accepts<sp/>pulse<sp/>by<sp/>pulse<sp/>from<sp/>the<sp/>radar_control.<sp/>It<sp/>parses<sp/>the<sp/>samples,<sp/>configures<sp/>the</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>*USRP,<sp/>sets<sp/>up<sp/>the<sp/>timing,<sp/>and<sp/>then<sp/>sends<sp/>samples/timing<sp/>to<sp/>the<sp/>USRPs.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>zmq::message_t<sp/>request;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.recv(&amp;request))<sp/></highlight><highlight class="comment">//TODO(keith):<sp/>change<sp/>to<sp/>poll</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Received<sp/>in<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>driverpacket::DriverPacket<sp/>driver_packet;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Here<sp/>we<sp/>accept<sp/>our<sp/>driver_packet<sp/>from<sp/>the<sp/>radar_control.<sp/>We<sp/>use<sp/>that<sp/>info<sp/>in<sp/>order<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//configure<sp/>the<sp/>USRP<sp/>devices<sp/>based<sp/>on<sp/>experiment<sp/>requirements.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>total<sp/>setup<sp/>time:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>packet_msg_str(static_cast&lt;char*&gt;(request.data()),<sp/>request.size());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.ParseFromString(packet_msg_str)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqn_num<sp/>=<sp/>driver_packet.sequence_num();</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sqn_num<sp/>!=<sp/>expected_sqn_num){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;SEQUENCE<sp/>NUMBER<sp/>MISMATCH:<sp/>SQN<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sqn_num<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>EXPECTED:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expected_sqn_num);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>handle<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>burst<sp/>flags:<sp/>SOB<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>&lt;&lt;<sp/>driver_packet.sob()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>EOB<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>driver_packet.eob());</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>stream<sp/>set<sp/>up<sp/>time:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//On<sp/>start<sp/>of<sp/>new<sp/>sequence,<sp/>check<sp/>if<sp/>there<sp/>are<sp/>new<sp/>USRP<sp/>channels<sp/>and<sp/>if<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//set<sp/>what<sp/>USRP<sp/>TX<sp/>channels<sp/>and<sp/>rate(Hz)<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.channels_size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>driver_packet.sob()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>starting<sp/>something<sp/>new&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels<sp/>=<sp/>make_tx_channels(driver_packet);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_args.channels<sp/>=<sp/>channels;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>actual_tx_rate<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1ad7a86c9090ae50a26fe0ead782f680b1" kindref="member">set_tx_rate</ref>(driver_packet.txrate(),channels);<sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>Test<sp/>that<sp/>USRPs<sp/>exist<sp/>to<sp/>match<sp/>channels<sp/>in<sp/>config.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_stream<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a38d58a62df34bfe1204297b13269265d" kindref="member">get_usrp_tx_stream</ref>(stream_args);<sp/><sp/></highlight><highlight class="comment">//<sp/>~44ms<sp/>TODO(keith):<sp/>See<sp/>what<sp/>0s<sp/>look<sp/>like<sp/>on<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usrp_channels_set<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>center<sp/>freq<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>there<sp/>is<sp/>new<sp/>center<sp/>frequency<sp/>data,<sp/>set<sp/>TX<sp/>center<sp/>frequency<sp/>for<sp/>each<sp/>USRP<sp/>TX<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.txcenterfreq()<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>setting<sp/>tx<sp/>center<sp/>freq<sp/>to<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.txcenterfreq());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usrp_d.<ref refid="classUSRP_1af0656e9048b499789d610b8a1fa4fd38" kindref="member">set_tx_center_freq</ref>(driver_packet.txcenterfreq(),channels);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center_freq_set<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>sample<sp/>unpack<sp/>time:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Parse<sp/>new<sp/>samples<sp/>from<sp/>driver<sp/>packet<sp/>if<sp/>they<sp/>exist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.channel_samples_size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>~700us<sp/>to<sp/>unpack<sp/>4x1600<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples<sp/>=<sp/>make_tx_samples(driver_packet);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_per_buff<sp/>=<sp/>samples[0].size();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_set<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//In<sp/>order<sp/>to<sp/>transmit,<sp/>these<sp/>parameters<sp/>need<sp/>to<sp/>be<sp/>set<sp/>at<sp/>least<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((usrp_channels_set<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>||<sp/>(center_freq_set<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>||(samples_set<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(std::endl<sp/>&lt;&lt;std::endl);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signal_start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//High<sp/>speed<sp/>IO<sp/>and<sp/>pulse<sp/>times<sp/>are<sp/>calculated.<sp/>These<sp/>are<sp/>the<sp/>timings<sp/>generated<sp/>for<sp/>the<sp/>GPIO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pins<sp/>that<sp/>connect<sp/>to<sp/>the<sp/>protection<sp/>circuits.<sp/>When<sp/>these<sp/>pins<sp/>go<sp/>high<sp/>is<sp/>relative<sp/>to<sp/>the<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>pulses<sp/>go<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.sob()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>USRP<sp/>needs<sp/>about<sp/>a<sp/>SET_TIME_COMMAND_DELAY<sp/>buffer<sp/>into<sp/>the<sp/>future<sp/>before<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//commands<sp/>will<sp/>correctly<sp/>work.<sp/>This<sp/>was<sp/>found<sp/>through<sp/>testing<sp/>and<sp/>may<sp/>be<sp/>subject<sp/>to<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//with<sp/>USRP<sp/>firmware<sp/>updates.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>time_zero<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">get_current_usrp_time</ref>()<sp/>+<sp/>uhd::time_spec_t(SET_TIME_COMMAND_DELAY);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//convert<sp/>us<sp/>to<sp/>s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_to_send_pulse<sp/>=<sp/>uhd::time_spec_t(driver_packet.timetosendsamples()/1e6);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pulse_start_time<sp/>=<sp/>time_zero<sp/>+<sp/>time_to_send_pulse;<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pulse_len_time<sp/>=<sp/>uhd::time_spec_t(samples_per_buff/usrp_d.<ref refid="classUSRP_1a2330eadde3feb6577b25f34372613084" kindref="member">get_tx_rate</ref>());<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tr_time_high<sp/>=<sp/>pulse_start_time<sp/>-<sp/>uhd::time_spec_t(tr_window_time_s);<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>atten_time_high<sp/>=<sp/>tr_time_high<sp/>-<sp/>uhd::time_spec_t(atten_window_time_start_s);<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>scope_sync_high<sp/>=<sp/>atten_time_high;<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tr_time_low<sp/>=<sp/>pulse_start_time<sp/>+<sp/>pulse_len_time<sp/>+<sp/>uhd::time_spec_t(tr_window_time_s);<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>atten_time_low<sp/>=<sp/>tr_time_low<sp/>+<sp/>uhd::time_spec_t(atten_window_time_end_s);<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>line<sp/>lets<sp/>us<sp/>trigger<sp/>TR<sp/>with<sp/>atten<sp/>timing,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//we<sp/>can<sp/>still<sp/>keep<sp/>the<sp/>existing<sp/>logic<sp/>if<sp/>we<sp/>want<sp/>to<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_high<sp/>=<sp/>atten_time_high;<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>x_low<sp/>=<sp/>tr_time_low;<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//To<sp/>make<sp/>sure<sp/>tx<sp/>and<sp/>rx<sp/>timing<sp/>are<sp/>synced,<sp/>this<sp/>thread<sp/>sends<sp/>when<sp/>to<sp/>receive<sp/>to<sp/>the<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>driver_packet.sob()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(start_receive_timing.data(),<sp/>&amp;scope_sync_high,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(scope_sync_high));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>receive_side_timing_socket.send(start_receive_timing);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_zero:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_zero.get_real_secs());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_now<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>usrp_d.<ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">get_current_usrp_time</ref>().get_real_secs());</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>timetosendsamples(us)<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.timetosendsamples());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_to_send_pulse<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_to_send_pulse.get_real_secs());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>atten_time_high<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>atten_time_high.get_real_secs());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>tr_time_high<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tr_time_high.get_real_secs());</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>pulse_start_time<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pulse_start_time.get_real_secs());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>tr_time_low<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tr_time_low.get_real_secs());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>atten_time_low<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>atten_time_low.get_real_secs());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>scope_sync_low<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>scope_sync_low.get_real_secs());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signal_end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>signal_time_diff<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(signal_end<sp/>-<sp/>signal_start).count();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>signal<sp/>creation<sp/>time<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;signal_time_diff<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;us&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(std::endl<sp/>&lt;&lt;std::endl);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>full<sp/>usrp<sp/>time<sp/>stuff<sp/>&quot;</highlight><highlight class="normal">,<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>send<sp/>the<sp/>start<sp/>time<sp/>and<sp/>samples<sp/>to<sp/>the<sp/>USRP.<sp/>This<sp/>is<sp/>done<sp/>before<sp/>IO<sp/>signals<sp/>are<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//since<sp/>those<sp/>commands<sp/>create<sp/>a<sp/>blocking<sp/>buffer<sp/>which<sp/>causes<sp/>the<sp/>transfer<sp/>of<sp/>samples<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//late.<sp/>This<sp/>leads<sp/>to<sp/>no<sp/>waveform<sp/>output<sp/>on<sp/>the<sp/>USRP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time<sp/>to<sp/>send<sp/>samples<sp/>to<sp/>USRP:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>md<sp/>=<sp/><ref refid="classTXMetadata" kindref="compound">TXMetadata</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_has_time_spec(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_time_spec(atten_time_high);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>USRP<sp/>tx_metadata<sp/>start_of_burst<sp/>and<sp/>end_of_burst<sp/>describe<sp/>start<sp/>and<sp/>end<sp/>of<sp/>the<sp/>pulse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_start_of_burst(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>num_samps_sent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//This<sp/>will<sp/>loop<sp/>until<sp/>all<sp/>samples<sp/>are<sp/>sent<sp/>to<sp/>the<sp/>usrp.<sp/>Send<sp/>will<sp/>block<sp/>until<sp/>all<sp/>samples<sp/>sent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//or<sp/>timed<sp/>out(too<sp/>many<sp/>samples<sp/>to<sp/>send<sp/>within<sp/>timeout<sp/>period).<sp/>Send<sp/>has<sp/>a<sp/>default<sp/>timing<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//0.1<sp/>seconds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(num_samps_sent<sp/>&lt;<sp/>samples_per_buff)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_samps_to_send<sp/>=<sp/>samples_per_buff<sp/>-<sp/>num_samps_sent;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Samples<sp/>to<sp/>send<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_samps_to_send);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Send<sp/>behaviour<sp/>can<sp/>be<sp/>found<sp/>in<sp/>UHD<sp/>docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_samps_sent<sp/>=<sp/>tx_stream-&gt;send(samples,<sp/>num_samps_to_send,<sp/>md.get_md());<sp/></highlight><highlight class="comment">//TODO(keith):<sp/>Determine<sp/>timeout<sp/>properties.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Samples<sp/>sent<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_samps_sent);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_start_of_burst(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_has_time_spec(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>md.set_end_of_burst(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_stream-&gt;send(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>md.get_md());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>}());</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>DEBUG_MSG(std::endl<sp/>&lt;&lt;<sp/>std::endl);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eob_start<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Final<sp/>end<sp/>of<sp/>sequence<sp/>work<sp/>to<sp/>acknowledge<sp/>seq<sp/>num.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.eob()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>driverpacket::DriverPacket<sp/>ack;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;SEQUENCENUM<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sqn_num);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ack.set_sequence_num(sqn_num);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>expected_sqn_num<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ack_str;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ack.SerializeToString(&amp;ack_str);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zmq::message_t<sp/>ack_msg(ack_str.size());</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)ack_msg.data(),<sp/>ack_str.c_str(),ack_str.size());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ack_socket.send(ack_msg);<sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>Potentially<sp/>add<sp/>other<sp/>return<sp/>statuses<sp/>to<sp/>ack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eob_end<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eob_diff<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::microseconds&gt;(eob_end<sp/>-<sp/>eob_start).count();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(COLOR_BLUE(</highlight><highlight class="stringliteral">&quot;TRANSMIT&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>eob<sp/>stuff<sp/>time<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;eob_diff&lt;&lt;</highlight><highlight class="stringliteral">&quot;us&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(std::endl<sp/>&lt;&lt;<sp/>std::endl);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">std::string<sp/>random_string(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length<sp/>)</highlight></codeline>
<codeline lineno="351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Lambda<sp/>expression<sp/>to<sp/>return<sp/>a<sp/>random<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>randchar<sp/>=<sp/>[]()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>charset[]<sp/>=</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0123456789&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_index<sp/>=<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(charset)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>charset[<sp/>rand()<sp/>%<sp/>max_index<sp/>];</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str(length,0);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>std::generate_n(<sp/>str.begin(),<sp/>length,<sp/>randchar<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>receive(zmq::context_t<sp/>&amp;driver_c,<sp/><ref refid="classUSRP" kindref="compound">USRP</ref><sp/>&amp;usrp_d,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DriverOptions<sp/>&amp;driver_options)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Enter<sp/>receive<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>driver_packet_pub_socket(driver_c,<sp/>ZMQ_SUB);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.connect(</highlight><highlight class="stringliteral">&quot;inproc://threads&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.setsockopt(ZMQ_SUBSCRIBE,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0))</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>zmq::message_t<sp/>request;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40;1mRECEIVE\033[0m:<sp/>Creating<sp/>and<sp/>connected<sp/>to<sp/>thread<sp/>socket<sp/>in<sp/>control&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>receive_side_timing_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(receive_side_timing_socket.bind(</highlight><highlight class="stringliteral">&quot;inproc://timing&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>zmq::message_t<sp/>start_receive_timing;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>data_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(data_socket.connect(</highlight><highlight class="stringliteral">&quot;inproc://data&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>center_freq_set<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>uhd::stream_args_t<sp/>stream_args(</highlight><highlight class="stringliteral">&quot;fc32&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sc16&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>uhd::stream_cmd_t<sp/>stream_cmd(</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uhd::stream_cmd_t::STREAM_MODE_NUM_SAMPS_AND_DONE);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rx_rate_hz<sp/>=<sp/>driver_options.get_rx_rate();</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>receive_channels<sp/>=<sp/>driver_options.get_receive_channels();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>stream_args.channels<sp/>=<sp/>receive_channels;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>usrp_d.<ref refid="classUSRP_1afa1efa80fcb31a8422ce118189d0e6e3" kindref="member">set_rx_rate</ref>(rx_rate_hz,receive_channels);<sp/><sp/></highlight><highlight class="comment">//<sp/>~450us</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>uhd::rx_streamer::sptr<sp/>rx_stream<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a0466c9207c6a06169adfdfbbc91b5d6e" kindref="member">get_usrp_rx_stream</ref>(stream_args);<sp/><sp/></highlight><highlight class="comment">//<sp/>~44ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//This<sp/>loop<sp/>receives<sp/>1<sp/>pulse<sp/>sequence<sp/>worth<sp/>of<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>driver_packet_pub_socket.recv(&amp;request);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(<sp/></highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>recv<sp/>new<sp/>request&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>driverpacket::DriverPacket<sp/>driver_packet;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>packet_msg_str(static_cast&lt;char*&gt;(request.data()),<sp/>request.size());</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>driver_packet.ParseFromString(packet_msg_str);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>burst<sp/>flags<sp/>SOB<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.sob()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>EOB<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.eob());</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>only<sp/>begin<sp/>receiving<sp/>if<sp/>its<sp/>the<sp/>start<sp/>of<sp/>a<sp/>pulse<sp/>sequence.<sp/>The<sp/>rest<sp/>of<sp/>the<sp/>pulses<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>driver_packet.sob()<sp/>==<sp/>false<sp/>)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>center<sp/>frq<sp/>tuning<sp/>time:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.rxcenterfreq()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set_freq<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a20942898561a12aa4c14de69cf5cc341" kindref="member">set_rx_center_freq</ref>(driver_packet.rxcenterfreq(),<sp/>receive_channels);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>center<sp/>freq<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>set_freq);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>center_freq_set<sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(center_freq_set<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::complex&lt;float&gt;<sp/>*&gt;<sp/>buffer_ptrs;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mem_size;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Use<sp/>a<sp/>random<sp/>string<sp/>to<sp/>make<sp/>a<sp/>unique<sp/>set<sp/>of<sp/>named<sp/>shared<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>shr_mem_name<sp/>=<sp/>random_string(25);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>SharedMemoryHandler<sp/>shrmem(shr_mem_name);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>shared<sp/>memory<sp/>unpack<sp/>timing:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_size<sp/>=<sp/>receive_channels.size()<sp/>*<sp/>driver_packet.numberofreceivesamples()</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(std::complex&lt;float&gt;);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shrmem.create_shr_mem(mem_size);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>vector<sp/>of<sp/>pointers<sp/>to<sp/>where<sp/>each<sp/>channel&apos;s<sp/>data<sp/>gets<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint32_t<sp/>i=0;<sp/>i&lt;receive_channels.size();<sp/>i++){</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::complex&lt;float&gt;*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shrmem.get_shrmem_addr())<sp/>+</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i*driver_packet.numberofreceivesamples();</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_ptrs.push_back(ptr);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>uhd::time_spec_t<sp/>time_zero;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>time<sp/>taken<sp/>to<sp/>recv<sp/>timing<sp/>info:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Got<sp/>to<sp/>\033[33;40mRECEIVE\033[0m<sp/>timing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receive_side_timing_socket.recv(&amp;start_receive_timing);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_zero<sp/>=<sp/>*(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uhd::time_spec_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(start_receive_timing.data()));<sp/></highlight><highlight class="comment">//s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_now<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">get_current_usrp_time</ref>();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_diff<sp/>=<sp/>time_zero<sp/>-<sp/>time_now;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>time_diff_str;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_diff.get_real_secs()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[32m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[31m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>time_zero<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;time_zero.get_real_secs()<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_now:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_now.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_diff<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>time_diff_str.str());</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>time<sp/>to<sp/>recv<sp/>from<sp/>USRP:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>USRP<sp/>stream<sp/>cmd<sp/>setup<sp/>time:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Documentation<sp/>is<sp/>unclear,<sp/>but<sp/>num<sp/>samps<sp/>is<sp/>per<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_cmd.num_samps<sp/>=<sp/>size_t(driver_packet.numberofreceivesamples());</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_cmd.stream_now<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream_cmd.time_spec<sp/>=<sp/>time_zero;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_stream-&gt;issue_stream_cmd(stream_cmd);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>total<sp/>samples<sp/>to<sp/>receive:<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>receive_channels.size()<sp/>*<sp/>driver_packet.numberofreceivesamples()</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>mem<sp/>size<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>mem_size);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_now<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">get_current_usrp_time</ref>();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_diff<sp/>=<sp/>time_zero<sp/>-<sp/>time_now;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>time_diff_str;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_diff.get_real_secs()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[32m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[31m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>Time<sp/>before<sp/>streaming:<sp/>time_zero<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>time_zero.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_now<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_now.get_real_secs()<sp/></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_diff<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff_str.str());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>accumulated_received_samples<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>md<sp/>=<sp/><ref refid="classRXMetadata" kindref="compound">RXMetadata</ref>();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(accumulated_received_samples<sp/>&lt;<sp/>driver_packet.numberofreceivesamples())<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_rx_samps<sp/>=<sp/>rx_stream-&gt;recv(buffer_ptrs,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)driver_packet.numberofreceivesamples(),<sp/>md.get_md(),0.1,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>error_code<sp/>=<sp/>md.get_error_code();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(error_code)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uhd::rx_metadata_t::ERROR_CODE_NONE<sp/>:</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uhd::rx_metadata_t::ERROR_CODE_TIMEOUT<sp/>:<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_now<sp/>=<sp/>usrp_d.<ref refid="classUSRP_1a42d2fdd63623ec898a77ffecfeb91377" kindref="member">get_current_usrp_time</ref>();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_diff<sp/>=<sp/>time_zero<sp/>-<sp/>time_now;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>time_diff_str;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(time_diff.get_real_secs()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[32m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_diff_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[31m&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>Timeout<sp/>while<sp/>streaming<sp/>-&gt;<sp/>time_zero<sp/>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>time_zero.get_real_secs()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_now<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_now.get_real_secs()<sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>time_diff<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>time_diff_str.str());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>handle<sp/>timeout<sp/>situation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//With<sp/>late<sp/>time<sp/>zero(we<sp/>think),<sp/>this<sp/>recv<sp/>throws<sp/>a<sp/>timeout<sp/>and<sp/>has<sp/>zero<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//infinitely<sp/>loops.<sp/>To<sp/>fix,<sp/>we<sp/>are<sp/>thinking<sp/>best<sp/>action<sp/>would<sp/>be<sp/>to<sp/>abandon<sp/>loop<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//and<sp/>send<sp/>error<sp/>code<sp/>along<sp/>with<sp/>stuff<sp/>to<sp/>rx_SIG_proc.<sp/>This<sp/>way<sp/>the<sp/>signal<sp/>processing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>know<sp/>to<sp/>just<sp/>abandon<sp/>info.<sp/>Our<sp/>error<sp/>handler<sp/>can<sp/>keep<sp/>track<sp/>of<sp/>how<sp/>many<sp/>times<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>is<sp/>happening<sp/>and<sp/>respond<sp/>to<sp/>that.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>uhd::rx_metadata_t::ERROR_CODE_OVERFLOW<sp/>:</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulated_received_samples<sp/>+=<sp/>num_rx_samps;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Accumulated<sp/>received<sp/>samples<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>accumulated_received_samples);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>received<sp/>samples<sp/>per<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>accumulated_received_samples);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;\033[33;40mRECEIVE\033[0m<sp/>package<sp/>samples<sp/>and<sp/>send<sp/>timing:<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rxsamplesmetadata::RxSamplesMetadata<sp/>samples_metadata;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_metadata.set_numberofreceivesamples(driver_packet.numberofreceivesamples());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_metadata.set_shrmemname(shr_mem_name);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_metadata.set_sequence_num(driver_packet.sequence_num());</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>samples_metadata_str;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_metadata.SerializeToString(&amp;samples_metadata_str);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zmq::message_t<sp/>samples_metadata_size_message(samples_metadata_str.size());</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>samples_metadata_size_message.data<sp/>(),<sp/>samples_metadata_str.c_str(),</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples_metadata_str.size());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_socket.send(samples_metadata_size_message);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}();</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>control(zmq::context_t<sp/>&amp;driver_c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DriverOptions<sp/>&amp;driver_options)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Enter<sp/>control<sp/>thread&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>and<sp/>connecting<sp/>to<sp/>thread<sp/>socket<sp/>in<sp/>control&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>driver_packet_pub_socket(driver_c,<sp/>ZMQ_PUB);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(driver_packet_pub_socket.bind(</highlight><highlight class="stringliteral">&quot;inproc://threads&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Creating<sp/>and<sp/>binding<sp/>control<sp/>socket&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>radarctrl_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(radarctrl_socket.bind(driver_options.get_radar_control_to_driver_address()))</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>zmq::message_t<sp/>request;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>data_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(data_socket.bind(&quot;inproc:</highlight><highlight class="comment">//data&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>ack_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(ack_socket.bind(&quot;inproc:</highlight><highlight class="comment">//ack&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>zmq::socket_t<sp/>rx_dsp_socket(driver_c,<sp/>ZMQ_PAIR);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>ERR_CHK_ZMQ(rx_dsp_socket.connect(driver_options.get_driver_to_rx_dsp_address()))</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//Sleep<sp/>to<sp/>handle<sp/>&quot;slow<sp/>joiner&quot;<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//http://zguide.zeromq.org/php:all#Getting-the-Message-Out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>sleep(1);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>while<sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>radarctrl_socket.recv(&amp;request);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>driverpacket::DriverPacket<sp/>driver_packet;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>TIMEIT_IF_DEBUG(</highlight><highlight class="stringliteral">&quot;CONTROL<sp/>Time<sp/>difference<sp/>to<sp/>deserialize<sp/>and<sp/>forward<sp/>=<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>request_str(static_cast&lt;char*&gt;(request.data()),<sp/>request.size());</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>driver_packet.ParseFromString(request_str);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DEBUG_MSG(</highlight><highlight class="stringliteral">&quot;Control<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.sob()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.eob()</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>driver_packet.channels_size());</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>thinking<sp/>about<sp/>moving<sp/>this<sp/>err<sp/>chking<sp/>to<sp/>transmit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.channel_samples_size()<sp/>!=<sp/>driver_packet.channels_size())<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>0;<sp/>channel<sp/>&lt;<sp/>driver_packet.channel_samples_size();<sp/>channel++)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>real_size<sp/>=<sp/>driver_packet.channel_samples(channel).real_size();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imag_size<sp/>=<sp/>driver_packet.channel_samples(channel).imag_size();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(real_size<sp/>!=<sp/>imag_size)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(keith):<sp/>throw<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.sob()<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>driver_packet.timetosendsamples()<sp/>==<sp/>0.0){</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>throw<sp/>error?<sp/>this<sp/>is<sp/>really<sp/>the<sp/>best<sp/>check<sp/>i<sp/>can<sp/>think<sp/>of<sp/>for<sp/>this<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>driver_packet_pub_socket.send(request);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}()</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(driver_packet.eob()<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO(keith):<sp/>handle<sp/>potential<sp/>errors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zmq::message_t<sp/>ack,<sp/>shr_mem_metadata;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_socket.recv(&amp;shr_mem_metadata);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//send<sp/>data<sp/>to<sp/>dsp<sp/>first<sp/>so<sp/>that<sp/>processing<sp/>can<sp/>start<sp/>before<sp/>next<sp/>sequence<sp/>is<sp/>aquired.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rx_dsp_socket.send(shr_mem_metadata);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ack_socket.recv(&amp;ack);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>radarctrl_socket.send(ack);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>UHD_SAFE_MAIN(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[])<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>GOOGLE_PROTOBUF_VERIFY_VERSION;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>uhd::set_thread_priority_safe();</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>DriverOptions<sp/>driver_options;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>DEBUG_MSG(driver_options.get_device_args());</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>DEBUG_MSG(driver_options.get_tx_rate());</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>DEBUG_MSG(driver_options.get_pps());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>DEBUG_MSG(driver_options.get_ref());</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>DEBUG_MSG(driver_options.get_tx_subdev());</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="classUSRP" kindref="compound">USRP</ref><sp/>usrp_d(driver_options);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Prepare<sp/>our<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>zmq::context_t<sp/>driver_context(1);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>std::vector&lt;std::thread&gt;<sp/>threads;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::ref<sp/>http://stackoverflow.com/a/15530639/1793295</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>std::thread<sp/>control_t(control,<sp/>std::ref(driver_context),<sp/>std::ref(driver_options));</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>std::thread<sp/>transmit_t(transmit,<sp/>std::ref(driver_context),<sp/>std::ref(usrp_d),</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ref(driver_options));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>std::thread<sp/>receive_t(receive,<sp/>std::ref(driver_context),<sp/>std::ref(usrp_d),</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ref(driver_options));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>threads.push_back(std::move(transmit_t));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>threads.push_back(std::move(receive_t));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>threads.push_back(std::move(control_t));</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>th<sp/>:<sp/>threads)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>th.join();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline lineno="706"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="usrp_drivers/n200/n200_driver.cpp"/>
  </compounddef>
</doxygen>
